//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class Variable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Variable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Variable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Variable() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_Variable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public NDShape Shape
    {
        get { return GetShape(); }
    }

    public string Name
    {
        get { return GetName(); }
    }

    public override bool Equals(System.Object obj)
    {
        // If parameter is null return false.
        if (obj == null)
        {
            return false;
        }

        // If parameter cannot be cast to Point return false.
        Variable p = obj as Variable;
        if ((System.Object)p == null)
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualVariable(this, p);
    }

    public bool Equals(Variable p)
    {
        // If parameter is null return false:
        if ((object)p == null)
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualVariable(this, p);
    }

    public static bool operator ==(Variable first, Variable second)
    {
        // If both are null, or both are same instance, return true.
        if (System.Object.ReferenceEquals(first, second))
        {
            return true;
        }

        // If one is null, but not both, return false.
        if (((object)first == null) || ((object)second == null))
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualVariable(first, second);
    }

    public static bool operator !=(Variable first, Variable second)
    {
        return !(first == second);
    }

    public override int GetHashCode()
    {
        // Todo: the hash value in C++ is size_t, but only in in C#
        return (int)GetHashValue();
    }

  public Variable(Function function) : this(CNTKLibPINVOKE.new_Variable__SWIG_0(Function.getCPtr(function)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variable() : this(CNTKLibPINVOKE.new_Variable__SWIG_1(), true) {
  }

  public NDShape GetShape() {
    NDShape ret = new NDShape(CNTKLibPINVOKE.Variable_GetShape(swigCPtr), true);
    return ret;
  }

  public AxisVector DynamicAxes() {
    AxisVector ret = new AxisVector(CNTKLibPINVOKE.Variable_DynamicAxes(swigCPtr), false);
    return ret;
  }

  public VariableKind Kind() {
    VariableKind ret = (VariableKind)CNTKLibPINVOKE.Variable_Kind(swigCPtr);
    return ret;
  }

  public bool IsSparse() {
    bool ret = CNTKLibPINVOKE.Variable_IsSparse(swigCPtr);
    return ret;
  }

  public bool IsInput() {
    bool ret = CNTKLibPINVOKE.Variable_IsInput(swigCPtr);
    return ret;
  }

  public bool IsOutput() {
    bool ret = CNTKLibPINVOKE.Variable_IsOutput(swigCPtr);
    return ret;
  }

  public bool IsParameter() {
    bool ret = CNTKLibPINVOKE.Variable_IsParameter(swigCPtr);
    return ret;
  }

  public bool IsConstant() {
    bool ret = CNTKLibPINVOKE.Variable_IsConstant(swigCPtr);
    return ret;
  }

  public bool IsPlaceholder() {
    bool ret = CNTKLibPINVOKE.Variable_IsPlaceholder(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = CNTKLibPINVOKE.Variable_GetName(swigCPtr);
    return ret;
  }

  public string Uid() {
    string ret = CNTKLibPINVOKE.Variable_Uid(swigCPtr);
    return ret;
  }

  public Function Owner() {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Variable_Owner(swigCPtr);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    return ret;
  }

  public DataType GetDataType() {
    DataType ret = (DataType)CNTKLibPINVOKE.Variable_GetDataType(swigCPtr);
    return ret;
  }

  public bool NeedsGradient() {
    bool ret = CNTKLibPINVOKE.Variable_NeedsGradient(swigCPtr);
    return ret;
  }

  public Variable(NDShape shape, VariableKind varType, DataType dataType, NDArrayView value, bool needsGradient, AxisVector dynamicAxes, string name, string uid) : this(CNTKLibPINVOKE.new_Variable__SWIG_2(NDShape.getCPtr(shape), (int)varType, (int)dataType, NDArrayView.getCPtr(value), needsGradient, AxisVector.getCPtr(dynamicAxes), name, uid), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variable(NDShape shape, bool isSparse, DataType dataType, bool needsGradient, string name, AxisVector dynamicAxes, string uid) : this(CNTKLibPINVOKE.new_Variable__SWIG_3(NDShape.getCPtr(shape), isSparse, (int)dataType, needsGradient, name, AxisVector.getCPtr(dynamicAxes), uid), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Variable(NDShape shape, VariableKind varType, DataType dataType, NDArrayView value, bool needsGradient, AxisVector dynamicAxes, bool isSparse, string name, string uid) : this(CNTKLibPINVOKE.new_Variable__SWIG_4(NDShape.getCPtr(shape), (int)varType, (int)dataType, NDArrayView.getCPtr(value), needsGradient, AxisVector.getCPtr(dynamicAxes), isSparse, name, uid), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetHashValue() {
    uint ret = CNTKLibPINVOKE.Variable_GetHashValue(swigCPtr);
    return ret;
  }

}

}
