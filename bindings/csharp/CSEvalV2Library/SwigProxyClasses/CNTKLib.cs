//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class CNTKLib {
  public static string _wcsdup(string s) {
    string ret = global::System.Runtime.InteropServices.Marshal.PtrToStringUni(CNTKLibPINVOKE._wcsdup(s));
    return ret;
  }

  public static void SaveAsLegacyModel(Function rootFunction, string modelFile) {
    CNTKLibPINVOKE.SaveAsLegacyModel(Function.getCPtr(rootFunction), modelFile);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint NewUniqueId() {
    uint ret = CNTKLibPINVOKE.NewUniqueId();
    return ret;
  }

  public static bool ShouldForceDeterministicAlgorithms() {
    bool ret = CNTKLibPINVOKE.ShouldForceDeterministicAlgorithms();
    return ret;
  }

  public static void EnableGradientAccumulationOptimization() {
    CNTKLibPINVOKE.EnableGradientAccumulationOptimization();
  }

  public static void DisableGradientAccumulationOptimization() {
    CNTKLibPINVOKE.DisableGradientAccumulationOptimization();
  }

  public static bool AreEqual(Value value1, Value value2, double relativeTolerance, double absoluteTolerance) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_0(Value.getCPtr(value1), Value.getCPtr(value2), relativeTolerance, absoluteTolerance);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(Value value1, Value value2, double relativeTolerance) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_1(Value.getCPtr(value1), Value.getCPtr(value2), relativeTolerance);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqual(Value value1, Value value2) {
    bool ret = CNTKLibPINVOKE.AreEqual__SWIG_2(Value.getCPtr(value1), Value.getCPtr(value2));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DataTypeName(DataType dataType) {
    string ret = CNTKLibPINVOKE.DataTypeName((int)dataType);
    return ret;
  }

  public static uint DataTypeSize(DataType dataType) {
    uint ret = CNTKLibPINVOKE.DataTypeSize((int)dataType);
    return ret;
  }

  public static bool IsSparseStorageFormat(StorageFormat storageFormat) {
    bool ret = CNTKLibPINVOKE.IsSparseStorageFormat((int)storageFormat);
    return ret;
  }

  public static bool AreEqualDeviceDescriptor(DeviceDescriptor left, DeviceDescriptor right) {
    bool ret = CNTKLibPINVOKE.AreEqualDeviceDescriptor(DeviceDescriptor.getCPtr(left), DeviceDescriptor.getCPtr(right));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqualShape(NDShape first, NDShape second) {
    bool ret = CNTKLibPINVOKE.AreEqualShape(NDShape.getCPtr(first), NDShape.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SentinelValueForAutoSelectRandomSeed {
    get {
      uint ret = CNTKLibPINVOKE.SentinelValueForAutoSelectRandomSeed_get();
      return ret;
    } 
  }

  public static bool AreEqualAxis(Axis first, Axis second) {
    bool ret = CNTKLibPINVOKE.AreEqualAxis(Axis.getCPtr(first), Axis.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string VariableKindName(VariableKind variableKind) {
    string ret = global::System.Runtime.InteropServices.Marshal.PtrToStringUni(CNTKLibPINVOKE.VariableKindName((int)variableKind));
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, DataType dataType, string name, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_0(NDShape.getCPtr(shape), (int)dataType, name, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable PlaceholderVariable(NDShape shape, DataType dataType, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.PlaceholderVariable__SWIG_1(NDShape.getCPtr(shape), (int)dataType, name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes, string name) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_0(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes), name), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Variable OutputVariable(NDShape shape, DataType dataType, AxisVector dynamicAxes) {
    Variable ret = new Variable(CNTKLibPINVOKE.OutputVariable__SWIG_1(NDShape.getCPtr(shape), (int)dataType, AxisVector.getCPtr(dynamicAxes)), true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AreEqualVariable(Variable first, Variable second) {
    bool ret = CNTKLibPINVOKE.AreEqualVariable(Variable.getCPtr(first), Variable.getCPtr(second));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int SentinelValueForInferParamInitRank {
    get {
      int ret = CNTKLibPINVOKE.SentinelValueForInferParamInitRank_get();
      return ret;
    } 
  }

  public static int DefaultParamInitScale {
    get {
      int ret = CNTKLibPINVOKE.DefaultParamInitScale_get();
      return ret;
    } 
  }

  public static int DefaultParamInitOutputRank {
    get {
      int ret = CNTKLibPINVOKE.DefaultParamInitOutputRank_get();
      return ret;
    } 
  }

  public static int DefaultParamInitFilterRank {
    get {
      int ret = CNTKLibPINVOKE.DefaultParamInitFilterRank_get();
      return ret;
    } 
  }

  public static Function Reshape(Variable operand, NDShape replacementShape, Axis beginAxis, Axis endAxis, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_0(Variable.getCPtr(operand), NDShape.getCPtr(replacementShape), Axis.getCPtr(beginAxis), Axis.getCPtr(endAxis), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Reshape(Variable operand, NDShape replacementShape, Axis beginAxis, Axis endAxis) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Reshape__SWIG_1(Variable.getCPtr(operand), NDShape.getCPtr(replacementShape), Axis.getCPtr(beginAxis), Axis.getCPtr(endAxis));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Combine(VariableVector operands, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Combine__SWIG_0(VariableVector.getCPtr(operands), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Combine(VariableVector operands) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Combine__SWIG_1(VariableVector.getCPtr(operands));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Alias(Variable operand, string name) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Alias__SWIG_0(Variable.getCPtr(operand), name);
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Function Alias(Variable operand) {
    global::System.IntPtr cPtr = CNTKLibPINVOKE.Alias__SWIG_1(Variable.getCPtr(operand));
    Function ret = (cPtr == global::System.IntPtr.Zero) ? null : new Function(cPtr, true);
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetMaxNumCPUThreads(uint numCPUThreads) {
    CNTKLibPINVOKE.SetMaxNumCPUThreads(numCPUThreads);
  }

  public static uint GetMaxNumCPUThreads() {
    uint ret = CNTKLibPINVOKE.GetMaxNumCPUThreads();
    return ret;
  }

}

}
