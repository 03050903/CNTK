//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class DeviceDescriptor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceDescriptor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeviceDescriptor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceDescriptor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_DeviceDescriptor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


    public uint Id
    {
        get { return GetId(); }
    }

    public DeviceKind Type
    {
        get { return GetDeviceType(); }
    }

    public static DeviceDescriptor CPUDevice
    {
        get { return GetCPUDevice(); }
    }

    public static DeviceDescriptor DefaultDevice
    {
        get { return GetDefaultDevice(); }
    }

    public static DeviceDescriptor BestDevice
    {
        get { return GetBestDevice(); }
    }

    public static System.Collections.Generic.List<DeviceDescriptor> AllDevices
    {
        get {
            var devices = GetAllDevices();
            var ret = new System.Collections.Generic.List<DeviceDescriptor>(devices.Count);
            foreach (var d in devices)
            {
                ret.Add(d);
            }
            return ret;
        }
    }

    public override bool Equals(System.Object obj)
    {
        // If parameter is null return false.
        if (obj == null)
        {
            return false;
        }

        // If parameter cannot be cast to Point return false.
        DeviceDescriptor p = obj as DeviceDescriptor;
        if ((System.Object)p == null)
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualDeviceDescriptor(this, p);
    }

    public bool Equals(DeviceDescriptor p)
    {
        // If parameter is null return false:
        if ((object)p == null)
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualDeviceDescriptor(this, p);
    }

    public static bool operator ==(DeviceDescriptor first, DeviceDescriptor second)
    {
        // If both are null, or both are same instance, return true.
        if (System.Object.ReferenceEquals(first, second))
        {
            return true;
        }

        // If one is null, but not both, return false.
        if (((object)first == null) || ((object)second == null))
        {
            return false;
        }

        // Return true if the fields match:
        return CNTKLib.AreEqualDeviceDescriptor(first, second);
    }

    public static bool operator !=(DeviceDescriptor first, DeviceDescriptor second)
    {
        return !(first == second);
    }

    public override int GetHashCode()
    {
        return this.GetDeviceType().GetHashCode();
    }

  public uint GetId() {
    uint ret = CNTKLibPINVOKE.DeviceDescriptor_GetId(swigCPtr);
    return ret;
  }

  public DeviceKind GetDeviceType() {
    DeviceKind ret = (DeviceKind)CNTKLibPINVOKE.DeviceDescriptor_GetDeviceType(swigCPtr);
    return ret;
  }

  public static DeviceDescriptor GetCPUDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_GetCPUDevice(), true);
    return ret;
  }

  public static DeviceDescriptor GPUDevice(uint deviceId) {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_GPUDevice(deviceId), true);
    return ret;
  }

  public static DeviceDescriptor GetDefaultDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_GetDefaultDevice(), true);
    return ret;
  }

  public static DeviceDescriptor UseDefaultDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_UseDefaultDevice(), true);
    return ret;
  }

  public static void SetDefaultDevice(DeviceDescriptor newDefaultDevice) {
    CNTKLibPINVOKE.DeviceDescriptor_SetDefaultDevice(DeviceDescriptor.getCPtr(newDefaultDevice));
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DeviceDescriptor GetBestDevice() {
    DeviceDescriptor ret = new DeviceDescriptor(CNTKLibPINVOKE.DeviceDescriptor_GetBestDevice(), true);
    return ret;
  }

  public static DeviceDescriptorVector GetAllDevices() {
    DeviceDescriptorVector ret = new DeviceDescriptorVector(CNTKLibPINVOKE.DeviceDescriptor_GetAllDevices(), false);
    return ret;
  }

}

}
