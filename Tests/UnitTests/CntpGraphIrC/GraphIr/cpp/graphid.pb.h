// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphid.proto

#ifndef PROTOBUF_graphid_2eproto__INCLUDED
#define PROTOBUF_graphid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace graphIR {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_graphid_2eproto();
void protobuf_InitDefaults_graphid_2eproto();
void protobuf_AssignDesc_graphid_2eproto();
void protobuf_ShutdownFile_graphid_2eproto();

class Graph;
class GraphInfo;
class IOArg;
class InitArg;
class Node;

// ===================================================================

class GraphInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:graphIR.GraphInfo) */ {
 public:
  GraphInfo();
  virtual ~GraphInfo();

  GraphInfo(const GraphInfo& from);

  inline GraphInfo& operator=(const GraphInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphInfo& default_instance();

  static const GraphInfo* internal_default_instance();

  void Swap(GraphInfo* other);

  // implements Message ----------------------------------------------

  inline GraphInfo* New() const { return New(NULL); }

  GraphInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphInfo& from);
  void MergeFrom(const GraphInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphInfo* other);
  void UnsafeMergeFrom(const GraphInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional string framework_name = 2;
  void clear_framework_name();
  static const int kFrameworkNameFieldNumber = 2;
  const ::std::string& framework_name() const;
  void set_framework_name(const ::std::string& value);
  void set_framework_name(const char* value);
  void set_framework_name(const char* value, size_t size);
  ::std::string* mutable_framework_name();
  ::std::string* release_framework_name();
  void set_allocated_framework_name(::std::string* framework_name);

  // optional string framework_version = 3;
  void clear_framework_version();
  static const int kFrameworkVersionFieldNumber = 3;
  const ::std::string& framework_version() const;
  void set_framework_version(const ::std::string& value);
  void set_framework_version(const char* value);
  void set_framework_version(const char* value, size_t size);
  ::std::string* mutable_framework_version();
  ::std::string* release_framework_version();
  void set_allocated_framework_version(::std::string* framework_version);

  // optional string graphgen_name = 4;
  void clear_graphgen_name();
  static const int kGraphgenNameFieldNumber = 4;
  const ::std::string& graphgen_name() const;
  void set_graphgen_name(const ::std::string& value);
  void set_graphgen_name(const char* value);
  void set_graphgen_name(const char* value, size_t size);
  ::std::string* mutable_graphgen_name();
  ::std::string* release_graphgen_name();
  void set_allocated_graphgen_name(::std::string* graphgen_name);

  // optional string graphgen_version = 5;
  void clear_graphgen_version();
  static const int kGraphgenVersionFieldNumber = 5;
  const ::std::string& graphgen_version() const;
  void set_graphgen_version(const ::std::string& value);
  void set_graphgen_version(const char* value);
  void set_graphgen_version(const char* value, size_t size);
  ::std::string* mutable_graphgen_version();
  ::std::string* release_graphgen_version();
  void set_allocated_graphgen_version(::std::string* graphgen_version);

  // optional string graph_version = 6;
  void clear_graph_version();
  static const int kGraphVersionFieldNumber = 6;
  const ::std::string& graph_version() const;
  void set_graph_version(const ::std::string& value);
  void set_graph_version(const char* value);
  void set_graph_version(const char* value, size_t size);
  ::std::string* mutable_graph_version();
  ::std::string* release_graph_version();
  void set_allocated_graph_version(::std::string* graph_version);

  // optional string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // map<string, string> attrs = 8;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attrs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attrs();

  // @@protoc_insertion_point(class_scope:graphIR.GraphInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      GraphInfo_AttrsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attrs_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr framework_name_;
  ::google::protobuf::internal::ArenaStringPtr framework_version_;
  ::google::protobuf::internal::ArenaStringPtr graphgen_name_;
  ::google::protobuf::internal::ArenaStringPtr graphgen_version_;
  ::google::protobuf::internal::ArenaStringPtr graph_version_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graphid_2eproto_impl();
  friend void  protobuf_AddDesc_graphid_2eproto_impl();
  friend void protobuf_AssignDesc_graphid_2eproto();
  friend void protobuf_ShutdownFile_graphid_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GraphInfo> GraphInfo_default_instance_;

// -------------------------------------------------------------------

class IOArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:graphIR.IOArg) */ {
 public:
  IOArg();
  virtual ~IOArg();

  IOArg(const IOArg& from);

  inline IOArg& operator=(const IOArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IOArg& default_instance();

  static const IOArg* internal_default_instance();

  void Swap(IOArg* other);

  // implements Message ----------------------------------------------

  inline IOArg* New() const { return New(NULL); }

  IOArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IOArg& from);
  void MergeFrom(const IOArg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IOArg* other);
  void UnsafeMergeFrom(const IOArg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string dtype = 2;
  void clear_dtype();
  static const int kDtypeFieldNumber = 2;
  const ::std::string& dtype() const;
  void set_dtype(const ::std::string& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  ::std::string* mutable_dtype();
  ::std::string* release_dtype();
  void set_allocated_dtype(::std::string* dtype);

  // optional int32 dbytes = 3;
  void clear_dbytes();
  static const int kDbytesFieldNumber = 3;
  ::google::protobuf::int32 dbytes() const;
  void set_dbytes(::google::protobuf::int32 value);

  // repeated int32 shape = 4;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:graphIR.IOArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dtype_;
  ::google::protobuf::int32 dbytes_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graphid_2eproto_impl();
  friend void  protobuf_AddDesc_graphid_2eproto_impl();
  friend void protobuf_AssignDesc_graphid_2eproto();
  friend void protobuf_ShutdownFile_graphid_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<IOArg> IOArg_default_instance_;

// -------------------------------------------------------------------

class InitArg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:graphIR.InitArg) */ {
 public:
  InitArg();
  virtual ~InitArg();

  InitArg(const InitArg& from);

  inline InitArg& operator=(const InitArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitArg& default_instance();

  static const InitArg* internal_default_instance();

  void Swap(InitArg* other);

  // implements Message ----------------------------------------------

  inline InitArg* New() const { return New(NULL); }

  InitArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitArg& from);
  void MergeFrom(const InitArg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitArg* other);
  void UnsafeMergeFrom(const InitArg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 dbytes = 1;
  void clear_dbytes();
  static const int kDbytesFieldNumber = 1;
  ::google::protobuf::int64 dbytes() const;
  void set_dbytes(::google::protobuf::int64 value);

  // optional string data_base64 = 2;
  void clear_data_base64();
  static const int kDataBase64FieldNumber = 2;
  const ::std::string& data_base64() const;
  void set_data_base64(const ::std::string& value);
  void set_data_base64(const char* value);
  void set_data_base64(const char* value, size_t size);
  ::std::string* mutable_data_base64();
  ::std::string* release_data_base64();
  void set_allocated_data_base64(::std::string* data_base64);

  // @@protoc_insertion_point(class_scope:graphIR.InitArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_base64_;
  ::google::protobuf::int64 dbytes_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graphid_2eproto_impl();
  friend void  protobuf_AddDesc_graphid_2eproto_impl();
  friend void protobuf_AssignDesc_graphid_2eproto();
  friend void protobuf_ShutdownFile_graphid_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<InitArg> InitArg_default_instance_;

// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:graphIR.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static const Node* internal_default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  void UnsafeMergeFrom(const Node& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string op = 2;
  void clear_op();
  static const int kOpFieldNumber = 2;
  const ::std::string& op() const;
  void set_op(const ::std::string& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  ::std::string* mutable_op();
  ::std::string* release_op();
  void set_allocated_op(::std::string* op);

  // repeated .graphIR.IOArg inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  const ::graphIR::IOArg& inputs(int index) const;
  ::graphIR::IOArg* mutable_inputs(int index);
  ::graphIR::IOArg* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
      inputs() const;

  // repeated .graphIR.IOArg outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  const ::graphIR::IOArg& outputs(int index) const;
  ::graphIR::IOArg* mutable_outputs(int index);
  ::graphIR::IOArg* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
      outputs() const;

  // map<string, string> attrs = 5;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attrs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attrs();

  // map<string, string> ext_attrs = 6;
  int ext_attrs_size() const;
  void clear_ext_attrs();
  static const int kExtAttrsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ext_attrs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ext_attrs();

  // map<string, .graphIR.InitArg> init_attrs = 7;
  int init_attrs_size() const;
  void clear_init_attrs();
  static const int kInitAttrsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >&
      init_attrs() const;
  ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >*
      mutable_init_attrs();

  // @@protoc_insertion_point(class_scope:graphIR.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg > inputs_;
  ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg > outputs_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Node_AttrsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attrs_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Node_ExtAttrsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ext_attrs_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::graphIR::InitArg,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Node_InitAttrsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::graphIR::InitArg,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > init_attrs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr op_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graphid_2eproto_impl();
  friend void  protobuf_AddDesc_graphid_2eproto_impl();
  friend void protobuf_AssignDesc_graphid_2eproto();
  friend void protobuf_ShutdownFile_graphid_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Node> Node_default_instance_;

// -------------------------------------------------------------------

class Graph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:graphIR.Graph) */ {
 public:
  Graph();
  virtual ~Graph();

  Graph(const Graph& from);

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph& default_instance();

  static const Graph* internal_default_instance();

  void Swap(Graph* other);

  // implements Message ----------------------------------------------

  inline Graph* New() const { return New(NULL); }

  Graph* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Graph* other);
  void UnsafeMergeFrom(const Graph& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .graphIR.GraphInfo graph_info = 1;
  bool has_graph_info() const;
  void clear_graph_info();
  static const int kGraphInfoFieldNumber = 1;
  const ::graphIR::GraphInfo& graph_info() const;
  ::graphIR::GraphInfo* mutable_graph_info();
  ::graphIR::GraphInfo* release_graph_info();
  void set_allocated_graph_info(::graphIR::GraphInfo* graph_info);

  // repeated .graphIR.Node nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  const ::graphIR::Node& nodes(int index) const;
  ::graphIR::Node* mutable_nodes(int index);
  ::graphIR::Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::graphIR::Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::graphIR::Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:graphIR.Graph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::graphIR::Node > nodes_;
  ::graphIR::GraphInfo* graph_info_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graphid_2eproto_impl();
  friend void  protobuf_AddDesc_graphid_2eproto_impl();
  friend void protobuf_AssignDesc_graphid_2eproto();
  friend void protobuf_ShutdownFile_graphid_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Graph> Graph_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphInfo

// optional string model_name = 1;
inline void GraphInfo::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::model_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.model_name)
}
inline void GraphInfo::set_model_name(const char* value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.model_name)
}
inline void GraphInfo::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.model_name)
}
inline ::std::string* GraphInfo::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_model_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.model_name)
}

// optional string framework_name = 2;
inline void GraphInfo::clear_framework_name() {
  framework_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::framework_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.framework_name)
  return framework_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_framework_name(const ::std::string& value) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.framework_name)
}
inline void GraphInfo::set_framework_name(const char* value) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.framework_name)
}
inline void GraphInfo::set_framework_name(const char* value, size_t size) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.framework_name)
}
inline ::std::string* GraphInfo::mutable_framework_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.framework_name)
  return framework_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_framework_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.framework_name)
  
  return framework_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_framework_name(::std::string* framework_name) {
  if (framework_name != NULL) {
    
  } else {
    
  }
  framework_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.framework_name)
}

// optional string framework_version = 3;
inline void GraphInfo::clear_framework_version() {
  framework_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::framework_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.framework_version)
  return framework_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_framework_version(const ::std::string& value) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.framework_version)
}
inline void GraphInfo::set_framework_version(const char* value) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.framework_version)
}
inline void GraphInfo::set_framework_version(const char* value, size_t size) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.framework_version)
}
inline ::std::string* GraphInfo::mutable_framework_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.framework_version)
  return framework_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_framework_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.framework_version)
  
  return framework_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_framework_version(::std::string* framework_version) {
  if (framework_version != NULL) {
    
  } else {
    
  }
  framework_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.framework_version)
}

// optional string graphgen_name = 4;
inline void GraphInfo::clear_graphgen_name() {
  graphgen_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::graphgen_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graphgen_name)
  return graphgen_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_graphgen_name(const ::std::string& value) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graphgen_name)
}
inline void GraphInfo::set_graphgen_name(const char* value) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graphgen_name)
}
inline void GraphInfo::set_graphgen_name(const char* value, size_t size) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graphgen_name)
}
inline ::std::string* GraphInfo::mutable_graphgen_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graphgen_name)
  return graphgen_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_graphgen_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graphgen_name)
  
  return graphgen_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_graphgen_name(::std::string* graphgen_name) {
  if (graphgen_name != NULL) {
    
  } else {
    
  }
  graphgen_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graphgen_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graphgen_name)
}

// optional string graphgen_version = 5;
inline void GraphInfo::clear_graphgen_version() {
  graphgen_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::graphgen_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graphgen_version)
  return graphgen_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_graphgen_version(const ::std::string& value) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graphgen_version)
}
inline void GraphInfo::set_graphgen_version(const char* value) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graphgen_version)
}
inline void GraphInfo::set_graphgen_version(const char* value, size_t size) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graphgen_version)
}
inline ::std::string* GraphInfo::mutable_graphgen_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graphgen_version)
  return graphgen_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_graphgen_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graphgen_version)
  
  return graphgen_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_graphgen_version(::std::string* graphgen_version) {
  if (graphgen_version != NULL) {
    
  } else {
    
  }
  graphgen_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graphgen_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graphgen_version)
}

// optional string graph_version = 6;
inline void GraphInfo::clear_graph_version() {
  graph_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::graph_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graph_version)
  return graph_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_graph_version(const ::std::string& value) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graph_version)
}
inline void GraphInfo::set_graph_version(const char* value) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graph_version)
}
inline void GraphInfo::set_graph_version(const char* value, size_t size) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graph_version)
}
inline ::std::string* GraphInfo::mutable_graph_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graph_version)
  return graph_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_graph_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graph_version)
  
  return graph_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_graph_version(::std::string* graph_version) {
  if (graph_version != NULL) {
    
  } else {
    
  }
  graph_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graph_version)
}

// optional string description = 7;
inline void GraphInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphInfo::description() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.description)
}
inline void GraphInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.description)
}
inline void GraphInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.description)
}
inline ::std::string* GraphInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphInfo::release_description() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.description)
}

// map<string, string> attrs = 8;
inline int GraphInfo::attrs_size() const {
  return attrs_.size();
}
inline void GraphInfo::clear_attrs() {
  attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GraphInfo::attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.GraphInfo.attrs)
  return attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GraphInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.GraphInfo.attrs)
  return attrs_.MutableMap();
}

inline const GraphInfo* GraphInfo::internal_default_instance() {
  return &GraphInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// IOArg

// optional string name = 1;
inline void IOArg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOArg::name() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOArg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.name)
}
inline void IOArg::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.IOArg.name)
}
inline void IOArg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.IOArg.name)
}
inline ::std::string* IOArg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.IOArg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOArg::release_name() {
  // @@protoc_insertion_point(field_release:graphIR.IOArg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOArg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.IOArg.name)
}

// optional string dtype = 2;
inline void IOArg::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOArg::dtype() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.dtype)
  return dtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOArg::set_dtype(const ::std::string& value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.dtype)
}
inline void IOArg::set_dtype(const char* value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.IOArg.dtype)
}
inline void IOArg::set_dtype(const char* value, size_t size) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.IOArg.dtype)
}
inline ::std::string* IOArg::mutable_dtype() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.IOArg.dtype)
  return dtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOArg::release_dtype() {
  // @@protoc_insertion_point(field_release:graphIR.IOArg.dtype)
  
  return dtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOArg::set_allocated_dtype(::std::string* dtype) {
  if (dtype != NULL) {
    
  } else {
    
  }
  dtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:graphIR.IOArg.dtype)
}

// optional int32 dbytes = 3;
inline void IOArg::clear_dbytes() {
  dbytes_ = 0;
}
inline ::google::protobuf::int32 IOArg::dbytes() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.dbytes)
  return dbytes_;
}
inline void IOArg::set_dbytes(::google::protobuf::int32 value) {
  
  dbytes_ = value;
  // @@protoc_insertion_point(field_set:graphIR.IOArg.dbytes)
}

// repeated int32 shape = 4;
inline int IOArg::shape_size() const {
  return shape_.size();
}
inline void IOArg::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 IOArg::shape(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.shape)
  return shape_.Get(index);
}
inline void IOArg::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.shape)
}
inline void IOArg::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:graphIR.IOArg.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IOArg::shape() const {
  // @@protoc_insertion_point(field_list:graphIR.IOArg.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IOArg::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.IOArg.shape)
  return &shape_;
}

inline const IOArg* IOArg::internal_default_instance() {
  return &IOArg_default_instance_.get();
}
// -------------------------------------------------------------------

// InitArg

// optional int64 dbytes = 1;
inline void InitArg::clear_dbytes() {
  dbytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InitArg::dbytes() const {
  // @@protoc_insertion_point(field_get:graphIR.InitArg.dbytes)
  return dbytes_;
}
inline void InitArg::set_dbytes(::google::protobuf::int64 value) {
  
  dbytes_ = value;
  // @@protoc_insertion_point(field_set:graphIR.InitArg.dbytes)
}

// optional string data_base64 = 2;
inline void InitArg::clear_data_base64() {
  data_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitArg::data_base64() const {
  // @@protoc_insertion_point(field_get:graphIR.InitArg.data_base64)
  return data_base64_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitArg::set_data_base64(const ::std::string& value) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.InitArg.data_base64)
}
inline void InitArg::set_data_base64(const char* value) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.InitArg.data_base64)
}
inline void InitArg::set_data_base64(const char* value, size_t size) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.InitArg.data_base64)
}
inline ::std::string* InitArg::mutable_data_base64() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.InitArg.data_base64)
  return data_base64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitArg::release_data_base64() {
  // @@protoc_insertion_point(field_release:graphIR.InitArg.data_base64)
  
  return data_base64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitArg::set_allocated_data_base64(::std::string* data_base64) {
  if (data_base64 != NULL) {
    
  } else {
    
  }
  data_base64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_base64);
  // @@protoc_insertion_point(field_set_allocated:graphIR.InitArg.data_base64)
}

inline const InitArg* InitArg::internal_default_instance() {
  return &InitArg_default_instance_.get();
}
// -------------------------------------------------------------------

// Node

// optional string name = 1;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:graphIR.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.Node.name)
}
inline void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:graphIR.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.Node.name)
}

// optional string op = 2;
inline void Node::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::op() const {
  // @@protoc_insertion_point(field_get:graphIR.Node.op)
  return op_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.Node.op)
}
inline void Node::set_op(const char* value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.Node.op)
}
inline void Node::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.Node.op)
}
inline ::std::string* Node::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.Node.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_op() {
  // @@protoc_insertion_point(field_release:graphIR.Node.op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:graphIR.Node.op)
}

// repeated .graphIR.IOArg inputs = 3;
inline int Node::inputs_size() const {
  return inputs_.size();
}
inline void Node::clear_inputs() {
  inputs_.Clear();
}
inline const ::graphIR::IOArg& Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Node.inputs)
  return inputs_.Get(index);
}
inline ::graphIR::IOArg* Node::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Node.inputs)
  return inputs_.Mutable(index);
}
inline ::graphIR::IOArg* Node::add_inputs() {
  // @@protoc_insertion_point(field_add:graphIR.Node.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Node.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:graphIR.Node.inputs)
  return inputs_;
}

// repeated .graphIR.IOArg outputs = 4;
inline int Node::outputs_size() const {
  return outputs_.size();
}
inline void Node::clear_outputs() {
  outputs_.Clear();
}
inline const ::graphIR::IOArg& Node::outputs(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Node.outputs)
  return outputs_.Get(index);
}
inline ::graphIR::IOArg* Node::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Node.outputs)
  return outputs_.Mutable(index);
}
inline ::graphIR::IOArg* Node::add_outputs() {
  // @@protoc_insertion_point(field_add:graphIR.Node.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
Node::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Node.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
Node::outputs() const {
  // @@protoc_insertion_point(field_list:graphIR.Node.outputs)
  return outputs_;
}

// map<string, string> attrs = 5;
inline int Node::attrs_size() const {
  return attrs_.size();
}
inline void Node::clear_attrs() {
  attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.attrs)
  return attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.attrs)
  return attrs_.MutableMap();
}

// map<string, string> ext_attrs = 6;
inline int Node::ext_attrs_size() const {
  return ext_attrs_.size();
}
inline void Node::clear_ext_attrs() {
  ext_attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::ext_attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.ext_attrs)
  return ext_attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_ext_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.ext_attrs)
  return ext_attrs_.MutableMap();
}

// map<string, .graphIR.InitArg> init_attrs = 7;
inline int Node::init_attrs_size() const {
  return init_attrs_.size();
}
inline void Node::clear_init_attrs() {
  init_attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >&
Node::init_attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.init_attrs)
  return init_attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >*
Node::mutable_init_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.init_attrs)
  return init_attrs_.MutableMap();
}

inline const Node* Node::internal_default_instance() {
  return &Node_default_instance_.get();
}
// -------------------------------------------------------------------

// Graph

// optional .graphIR.GraphInfo graph_info = 1;
inline bool Graph::has_graph_info() const {
  return this != internal_default_instance() && graph_info_ != NULL;
}
inline void Graph::clear_graph_info() {
  if (GetArenaNoVirtual() == NULL && graph_info_ != NULL) delete graph_info_;
  graph_info_ = NULL;
}
inline const ::graphIR::GraphInfo& Graph::graph_info() const {
  // @@protoc_insertion_point(field_get:graphIR.Graph.graph_info)
  return graph_info_ != NULL ? *graph_info_
                         : *::graphIR::GraphInfo::internal_default_instance();
}
inline ::graphIR::GraphInfo* Graph::mutable_graph_info() {
  
  if (graph_info_ == NULL) {
    graph_info_ = new ::graphIR::GraphInfo;
  }
  // @@protoc_insertion_point(field_mutable:graphIR.Graph.graph_info)
  return graph_info_;
}
inline ::graphIR::GraphInfo* Graph::release_graph_info() {
  // @@protoc_insertion_point(field_release:graphIR.Graph.graph_info)
  
  ::graphIR::GraphInfo* temp = graph_info_;
  graph_info_ = NULL;
  return temp;
}
inline void Graph::set_allocated_graph_info(::graphIR::GraphInfo* graph_info) {
  delete graph_info_;
  graph_info_ = graph_info;
  if (graph_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graphIR.Graph.graph_info)
}

// repeated .graphIR.Node nodes = 2;
inline int Graph::nodes_size() const {
  return nodes_.size();
}
inline void Graph::clear_nodes() {
  nodes_.Clear();
}
inline const ::graphIR::Node& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Graph.nodes)
  return nodes_.Get(index);
}
inline ::graphIR::Node* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Graph.nodes)
  return nodes_.Mutable(index);
}
inline ::graphIR::Node* Graph::add_nodes() {
  // @@protoc_insertion_point(field_add:graphIR.Graph.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::graphIR::Node >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Graph.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::graphIR::Node >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:graphIR.Graph.nodes)
  return nodes_;
}

inline const Graph* Graph::internal_default_instance() {
  return &Graph_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graphIR

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graphid_2eproto__INCLUDED
