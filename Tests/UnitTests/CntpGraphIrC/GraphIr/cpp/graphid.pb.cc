// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graphid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace graphIR {

namespace {

const ::google::protobuf::Descriptor* GraphInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphInfo_AttrsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IOArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IOArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_AttrsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Node_ExtAttrsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Node_InitAttrsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graphid_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_graphid_2eproto() {
  protobuf_AddDesc_graphid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graphid.proto");
  GOOGLE_CHECK(file != NULL);
  GraphInfo_descriptor_ = file->message_type(0);
  static const int GraphInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, framework_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, framework_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, graphgen_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, graphgen_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, graph_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, attrs_),
  };
  GraphInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphInfo_descriptor_,
      GraphInfo::internal_default_instance(),
      GraphInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphInfo, _internal_metadata_));
  GraphInfo_AttrsEntry_descriptor_ = GraphInfo_descriptor_->nested_type(0);
  IOArg_descriptor_ = file->message_type(1);
  static const int IOArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOArg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOArg, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOArg, dbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOArg, shape_),
  };
  IOArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IOArg_descriptor_,
      IOArg::internal_default_instance(),
      IOArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(IOArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOArg, _internal_metadata_));
  InitArg_descriptor_ = file->message_type(2);
  static const int InitArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitArg, dbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitArg, data_base64_),
  };
  InitArg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitArg_descriptor_,
      InitArg::internal_default_instance(),
      InitArg_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitArg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitArg, _internal_metadata_));
  Node_descriptor_ = file->message_type(3);
  static const int Node_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ext_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, init_attrs_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::internal_default_instance(),
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_));
  Node_AttrsEntry_descriptor_ = Node_descriptor_->nested_type(0);
  Node_ExtAttrsEntry_descriptor_ = Node_descriptor_->nested_type(1);
  Node_InitAttrsEntry_descriptor_ = Node_descriptor_->nested_type(2);
  Graph_descriptor_ = file->message_type(4);
  static const int Graph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, graph_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, nodes_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::internal_default_instance(),
      Graph_offsets_,
      -1,
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graphid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphInfo_descriptor_, GraphInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GraphInfo_AttrsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                GraphInfo_AttrsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IOArg_descriptor_, IOArg::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitArg_descriptor_, InitArg::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, Node::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_AttrsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Node_AttrsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_ExtAttrsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Node_ExtAttrsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_InitAttrsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::graphIR::InitArg,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Node_InitAttrsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, Graph::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graphid_2eproto() {
  GraphInfo_default_instance_.Shutdown();
  delete GraphInfo_reflection_;
  IOArg_default_instance_.Shutdown();
  delete IOArg_reflection_;
  InitArg_default_instance_.Shutdown();
  delete InitArg_reflection_;
  Node_default_instance_.Shutdown();
  delete Node_reflection_;
  Graph_default_instance_.Shutdown();
  delete Graph_reflection_;
}

void protobuf_InitDefaults_graphid_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  GraphInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IOArg_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  InitArg_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Node_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  Graph_default_instance_.DefaultConstruct();
  GraphInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  IOArg_default_instance_.get_mutable()->InitAsDefaultInstance();
  InitArg_default_instance_.get_mutable()->InitAsDefaultInstance();
  Node_default_instance_.get_mutable()->InitAsDefaultInstance();
  Graph_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_graphid_2eproto_once_);
void protobuf_InitDefaults_graphid_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_graphid_2eproto_once_,
                 &protobuf_InitDefaults_graphid_2eproto_impl);
}
void protobuf_AddDesc_graphid_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_graphid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgraphid.proto\022\007graphIR\"\213\002\n\tGraphInfo\022\022"
    "\n\nmodel_name\030\001 \001(\t\022\026\n\016framework_name\030\002 \001"
    "(\t\022\031\n\021framework_version\030\003 \001(\t\022\025\n\rgraphge"
    "n_name\030\004 \001(\t\022\030\n\020graphgen_version\030\005 \001(\t\022\025"
    "\n\rgraph_version\030\006 \001(\t\022\023\n\013description\030\007 \001"
    "(\t\022,\n\005attrs\030\010 \003(\0132\035.graphIR.GraphInfo.At"
    "trsEntry\032,\n\nAttrsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
    "alue\030\002 \001(\t:\0028\001\"C\n\005IOArg\022\014\n\004name\030\001 \001(\t\022\r\n"
    "\005dtype\030\002 \001(\t\022\016\n\006dbytes\030\003 \001(\005\022\r\n\005shape\030\004 "
    "\003(\005\".\n\007InitArg\022\016\n\006dbytes\030\001 \001(\003\022\023\n\013data_b"
    "ase64\030\002 \001(\t\"\217\003\n\004Node\022\014\n\004name\030\001 \001(\t\022\n\n\002op"
    "\030\002 \001(\t\022\036\n\006inputs\030\003 \003(\0132\016.graphIR.IOArg\022\037"
    "\n\007outputs\030\004 \003(\0132\016.graphIR.IOArg\022\'\n\005attrs"
    "\030\005 \003(\0132\030.graphIR.Node.AttrsEntry\022.\n\text_"
    "attrs\030\006 \003(\0132\033.graphIR.Node.ExtAttrsEntry"
    "\0220\n\ninit_attrs\030\007 \003(\0132\034.graphIR.Node.Init"
    "AttrsEntry\032,\n\nAttrsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\t:\0028\001\032/\n\rExtAttrsEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032B\n\016InitAttrsEn"
    "try\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.graphI"
    "R.InitArg:\0028\001\"M\n\005Graph\022&\n\ngraph_info\030\001 \001"
    "(\0132\022.graphIR.GraphInfo\022\034\n\005nodes\030\002 \003(\0132\r."
    "graphIR.Nodeb\006proto3", 900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graphid.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graphid_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_graphid_2eproto_once_);
void protobuf_AddDesc_graphid_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_graphid_2eproto_once_,
                 &protobuf_AddDesc_graphid_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graphid_2eproto {
  StaticDescriptorInitializer_graphid_2eproto() {
    protobuf_AddDesc_graphid_2eproto();
  }
} static_descriptor_initializer_graphid_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphInfo::kModelNameFieldNumber;
const int GraphInfo::kFrameworkNameFieldNumber;
const int GraphInfo::kFrameworkVersionFieldNumber;
const int GraphInfo::kGraphgenNameFieldNumber;
const int GraphInfo::kGraphgenVersionFieldNumber;
const int GraphInfo::kGraphVersionFieldNumber;
const int GraphInfo::kDescriptionFieldNumber;
const int GraphInfo::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphInfo::GraphInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graphid_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graphIR.GraphInfo)
}

void GraphInfo::InitAsDefaultInstance() {
}

GraphInfo::GraphInfo(const GraphInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graphIR.GraphInfo)
}

void GraphInfo::SharedCtor() {
  attrs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attrs_.SetEntryDescriptor(
      &::graphIR::GraphInfo_AttrsEntry_descriptor_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GraphInfo::~GraphInfo() {
  // @@protoc_insertion_point(destructor:graphIR.GraphInfo)
  SharedDtor();
}

void GraphInfo::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GraphInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphInfo_descriptor_;
}

const GraphInfo& GraphInfo::default_instance() {
  protobuf_InitDefaults_graphid_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GraphInfo> GraphInfo_default_instance_;

GraphInfo* GraphInfo::New(::google::protobuf::Arena* arena) const {
  GraphInfo* n = new GraphInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:graphIR.GraphInfo)
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  framework_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphgen_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attrs_.Clear();
}

bool GraphInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graphIR.GraphInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.model_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_framework_name;
        break;
      }

      // optional string framework_name = 2;
      case 2: {
        if (tag == 18) {
         parse_framework_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->framework_name().data(), this->framework_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.framework_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_framework_version;
        break;
      }

      // optional string framework_version = 3;
      case 3: {
        if (tag == 26) {
         parse_framework_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framework_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->framework_version().data(), this->framework_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.framework_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_graphgen_name;
        break;
      }

      // optional string graphgen_name = 4;
      case 4: {
        if (tag == 34) {
         parse_graphgen_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graphgen_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graphgen_name().data(), this->graphgen_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.graphgen_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_graphgen_version;
        break;
      }

      // optional string graphgen_version = 5;
      case 5: {
        if (tag == 42) {
         parse_graphgen_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graphgen_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graphgen_version().data(), this->graphgen_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.graphgen_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_graph_version;
        break;
      }

      // optional string graph_version = 6;
      case 6: {
        if (tag == 50) {
         parse_graph_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_version().data(), this->graph_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.graph_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attrs;
        break;
      }

      // map<string, string> attrs = 8;
      case 8: {
        if (tag == 66) {
         parse_attrs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attrs:
          GraphInfo_AttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.AttrsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.GraphInfo.AttrsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_attrs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graphIR.GraphInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graphIR.GraphInfo)
  return false;
#undef DO_
}

void GraphInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graphIR.GraphInfo)
  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string framework_name = 2;
  if (this->framework_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_name().data(), this->framework_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.framework_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->framework_name(), output);
  }

  // optional string framework_version = 3;
  if (this->framework_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_version().data(), this->framework_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.framework_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->framework_version(), output);
  }

  // optional string graphgen_name = 4;
  if (this->graphgen_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graphgen_name().data(), this->graphgen_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graphgen_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->graphgen_name(), output);
  }

  // optional string graphgen_version = 5;
  if (this->graphgen_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graphgen_version().data(), this->graphgen_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graphgen_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->graphgen_version(), output);
  }

  // optional string graph_version = 6;
  if (this->graph_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_version().data(), this->graph_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graph_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->graph_version(), output);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // map<string, string> attrs = 8;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.GraphInfo.AttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.GraphInfo.AttrsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphInfo_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphInfo_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:graphIR.GraphInfo)
}

::google::protobuf::uint8* GraphInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graphIR.GraphInfo)
  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string framework_name = 2;
  if (this->framework_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_name().data(), this->framework_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.framework_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->framework_name(), target);
  }

  // optional string framework_version = 3;
  if (this->framework_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->framework_version().data(), this->framework_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.framework_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->framework_version(), target);
  }

  // optional string graphgen_name = 4;
  if (this->graphgen_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graphgen_name().data(), this->graphgen_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graphgen_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->graphgen_name(), target);
  }

  // optional string graphgen_version = 5;
  if (this->graphgen_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graphgen_version().data(), this->graphgen_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graphgen_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->graphgen_version(), target);
  }

  // optional string graph_version = 6;
  if (this->graph_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_version().data(), this->graph_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.graph_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->graph_version(), target);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.GraphInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // map<string, string> attrs = 8;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.GraphInfo.AttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.GraphInfo.AttrsEntry.value");
      }
    };

    if (deterministic &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphInfo_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphInfo_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:graphIR.GraphInfo)
  return target;
}

size_t GraphInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphIR.GraphInfo)
  size_t total_size = 0;

  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // optional string framework_name = 2;
  if (this->framework_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->framework_name());
  }

  // optional string framework_version = 3;
  if (this->framework_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->framework_version());
  }

  // optional string graphgen_name = 4;
  if (this->graphgen_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graphgen_name());
  }

  // optional string graphgen_version = 5;
  if (this->graphgen_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graphgen_version());
  }

  // optional string graph_version = 6;
  if (this->graph_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_version());
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // map<string, string> attrs = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  {
    ::google::protobuf::scoped_ptr<GraphInfo_AttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attrs().begin();
        it != this->attrs().end(); ++it) {
      entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graphIR.GraphInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GraphInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graphIR.GraphInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graphIR.GraphInfo)
    UnsafeMergeFrom(*source);
  }
}

void GraphInfo::MergeFrom(const GraphInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graphIR.GraphInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GraphInfo::UnsafeMergeFrom(const GraphInfo& from) {
  GOOGLE_DCHECK(&from != this);
  attrs_.MergeFrom(from.attrs_);
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.framework_name().size() > 0) {

    framework_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_name_);
  }
  if (from.framework_version().size() > 0) {

    framework_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.framework_version_);
  }
  if (from.graphgen_name().size() > 0) {

    graphgen_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graphgen_name_);
  }
  if (from.graphgen_version().size() > 0) {

    graphgen_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graphgen_version_);
  }
  if (from.graph_version().size() > 0) {

    graph_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_version_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void GraphInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graphIR.GraphInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphInfo::CopyFrom(const GraphInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphIR.GraphInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GraphInfo::IsInitialized() const {

  return true;
}

void GraphInfo::Swap(GraphInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphInfo::InternalSwap(GraphInfo* other) {
  model_name_.Swap(&other->model_name_);
  framework_name_.Swap(&other->framework_name_);
  framework_version_.Swap(&other->framework_version_);
  graphgen_name_.Swap(&other->graphgen_name_);
  graphgen_version_.Swap(&other->graphgen_version_);
  graph_version_.Swap(&other->graph_version_);
  description_.Swap(&other->description_);
  attrs_.Swap(&other->attrs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphInfo_descriptor_;
  metadata.reflection = GraphInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphInfo

// optional string model_name = 1;
void GraphInfo::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::model_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.model_name)
}
void GraphInfo::set_model_name(const char* value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.model_name)
}
void GraphInfo::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.model_name)
}
::std::string* GraphInfo::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_model_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.model_name)
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.model_name)
}

// optional string framework_name = 2;
void GraphInfo::clear_framework_name() {
  framework_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::framework_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.framework_name)
  return framework_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_framework_name(const ::std::string& value) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.framework_name)
}
void GraphInfo::set_framework_name(const char* value) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.framework_name)
}
void GraphInfo::set_framework_name(const char* value, size_t size) {
  
  framework_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.framework_name)
}
::std::string* GraphInfo::mutable_framework_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.framework_name)
  return framework_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_framework_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.framework_name)
  
  return framework_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_framework_name(::std::string* framework_name) {
  if (framework_name != NULL) {
    
  } else {
    
  }
  framework_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.framework_name)
}

// optional string framework_version = 3;
void GraphInfo::clear_framework_version() {
  framework_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::framework_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.framework_version)
  return framework_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_framework_version(const ::std::string& value) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.framework_version)
}
void GraphInfo::set_framework_version(const char* value) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.framework_version)
}
void GraphInfo::set_framework_version(const char* value, size_t size) {
  
  framework_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.framework_version)
}
::std::string* GraphInfo::mutable_framework_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.framework_version)
  return framework_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_framework_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.framework_version)
  
  return framework_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_framework_version(::std::string* framework_version) {
  if (framework_version != NULL) {
    
  } else {
    
  }
  framework_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), framework_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.framework_version)
}

// optional string graphgen_name = 4;
void GraphInfo::clear_graphgen_name() {
  graphgen_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::graphgen_name() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graphgen_name)
  return graphgen_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_graphgen_name(const ::std::string& value) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graphgen_name)
}
void GraphInfo::set_graphgen_name(const char* value) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graphgen_name)
}
void GraphInfo::set_graphgen_name(const char* value, size_t size) {
  
  graphgen_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graphgen_name)
}
::std::string* GraphInfo::mutable_graphgen_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graphgen_name)
  return graphgen_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_graphgen_name() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graphgen_name)
  
  return graphgen_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_graphgen_name(::std::string* graphgen_name) {
  if (graphgen_name != NULL) {
    
  } else {
    
  }
  graphgen_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graphgen_name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graphgen_name)
}

// optional string graphgen_version = 5;
void GraphInfo::clear_graphgen_version() {
  graphgen_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::graphgen_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graphgen_version)
  return graphgen_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_graphgen_version(const ::std::string& value) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graphgen_version)
}
void GraphInfo::set_graphgen_version(const char* value) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graphgen_version)
}
void GraphInfo::set_graphgen_version(const char* value, size_t size) {
  
  graphgen_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graphgen_version)
}
::std::string* GraphInfo::mutable_graphgen_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graphgen_version)
  return graphgen_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_graphgen_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graphgen_version)
  
  return graphgen_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_graphgen_version(::std::string* graphgen_version) {
  if (graphgen_version != NULL) {
    
  } else {
    
  }
  graphgen_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graphgen_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graphgen_version)
}

// optional string graph_version = 6;
void GraphInfo::clear_graph_version() {
  graph_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::graph_version() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.graph_version)
  return graph_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_graph_version(const ::std::string& value) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.graph_version)
}
void GraphInfo::set_graph_version(const char* value) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.graph_version)
}
void GraphInfo::set_graph_version(const char* value, size_t size) {
  
  graph_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.graph_version)
}
::std::string* GraphInfo::mutable_graph_version() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.graph_version)
  return graph_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_graph_version() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.graph_version)
  
  return graph_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_graph_version(::std::string* graph_version) {
  if (graph_version != NULL) {
    
  } else {
    
  }
  graph_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_version);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.graph_version)
}

// optional string description = 7;
void GraphInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GraphInfo::description() const {
  // @@protoc_insertion_point(field_get:graphIR.GraphInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.GraphInfo.description)
}
void GraphInfo::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.GraphInfo.description)
}
void GraphInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.GraphInfo.description)
}
::std::string* GraphInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.GraphInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GraphInfo::release_description() {
  // @@protoc_insertion_point(field_release:graphIR.GraphInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GraphInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:graphIR.GraphInfo.description)
}

// map<string, string> attrs = 8;
int GraphInfo::attrs_size() const {
  return attrs_.size();
}
void GraphInfo::clear_attrs() {
  attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
GraphInfo::attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.GraphInfo.attrs)
  return attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
GraphInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.GraphInfo.attrs)
  return attrs_.MutableMap();
}

inline const GraphInfo* GraphInfo::internal_default_instance() {
  return &GraphInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOArg::kNameFieldNumber;
const int IOArg::kDtypeFieldNumber;
const int IOArg::kDbytesFieldNumber;
const int IOArg::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOArg::IOArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graphid_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graphIR.IOArg)
}

void IOArg::InitAsDefaultInstance() {
}

IOArg::IOArg(const IOArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graphIR.IOArg)
}

void IOArg::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbytes_ = 0;
  _cached_size_ = 0;
}

IOArg::~IOArg() {
  // @@protoc_insertion_point(destructor:graphIR.IOArg)
  SharedDtor();
}

void IOArg::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IOArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IOArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IOArg_descriptor_;
}

const IOArg& IOArg::default_instance() {
  protobuf_InitDefaults_graphid_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IOArg> IOArg_default_instance_;

IOArg* IOArg::New(::google::protobuf::Arena* arena) const {
  IOArg* n = new IOArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IOArg::Clear() {
// @@protoc_insertion_point(message_clear_start:graphIR.IOArg)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbytes_ = 0;
  shape_.Clear();
}

bool IOArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graphIR.IOArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.IOArg.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dtype;
        break;
      }

      // optional string dtype = 2;
      case 2: {
        if (tag == 18) {
         parse_dtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dtype().data(), this->dtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.IOArg.dtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dbytes;
        break;
      }

      // optional int32 dbytes = 3;
      case 3: {
        if (tag == 24) {
         parse_dbytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 4;
      case 4: {
        if (tag == 34) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graphIR.IOArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graphIR.IOArg)
  return false;
#undef DO_
}

void IOArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graphIR.IOArg)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.IOArg.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string dtype = 2;
  if (this->dtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.IOArg.dtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dtype(), output);
  }

  // optional int32 dbytes = 3;
  if (this->dbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dbytes(), output);
  }

  // repeated int32 shape = 4;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shape(i), output);
  }

  // @@protoc_insertion_point(serialize_end:graphIR.IOArg)
}

::google::protobuf::uint8* IOArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graphIR.IOArg)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.IOArg.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string dtype = 2;
  if (this->dtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dtype().data(), this->dtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.IOArg.dtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dtype(), target);
  }

  // optional int32 dbytes = 3;
  if (this->dbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dbytes(), target);
  }

  // repeated int32 shape = 4;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shape(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graphIR.IOArg)
  return target;
}

size_t IOArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphIR.IOArg)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string dtype = 2;
  if (this->dtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dtype());
  }

  // optional int32 dbytes = 3;
  if (this->dbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dbytes());
  }

  // repeated int32 shape = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->shape_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IOArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graphIR.IOArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IOArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IOArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graphIR.IOArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graphIR.IOArg)
    UnsafeMergeFrom(*source);
  }
}

void IOArg::MergeFrom(const IOArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graphIR.IOArg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IOArg::UnsafeMergeFrom(const IOArg& from) {
  GOOGLE_DCHECK(&from != this);
  shape_.UnsafeMergeFrom(from.shape_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dtype().size() > 0) {

    dtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dtype_);
  }
  if (from.dbytes() != 0) {
    set_dbytes(from.dbytes());
  }
}

void IOArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graphIR.IOArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOArg::CopyFrom(const IOArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphIR.IOArg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IOArg::IsInitialized() const {

  return true;
}

void IOArg::Swap(IOArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOArg::InternalSwap(IOArg* other) {
  name_.Swap(&other->name_);
  dtype_.Swap(&other->dtype_);
  std::swap(dbytes_, other->dbytes_);
  shape_.UnsafeArenaSwap(&other->shape_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IOArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IOArg_descriptor_;
  metadata.reflection = IOArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IOArg

// optional string name = 1;
void IOArg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IOArg::name() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IOArg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.name)
}
void IOArg::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.IOArg.name)
}
void IOArg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.IOArg.name)
}
::std::string* IOArg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.IOArg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IOArg::release_name() {
  // @@protoc_insertion_point(field_release:graphIR.IOArg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IOArg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.IOArg.name)
}

// optional string dtype = 2;
void IOArg::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IOArg::dtype() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.dtype)
  return dtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IOArg::set_dtype(const ::std::string& value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.dtype)
}
void IOArg::set_dtype(const char* value) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.IOArg.dtype)
}
void IOArg::set_dtype(const char* value, size_t size) {
  
  dtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.IOArg.dtype)
}
::std::string* IOArg::mutable_dtype() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.IOArg.dtype)
  return dtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IOArg::release_dtype() {
  // @@protoc_insertion_point(field_release:graphIR.IOArg.dtype)
  
  return dtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IOArg::set_allocated_dtype(::std::string* dtype) {
  if (dtype != NULL) {
    
  } else {
    
  }
  dtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:graphIR.IOArg.dtype)
}

// optional int32 dbytes = 3;
void IOArg::clear_dbytes() {
  dbytes_ = 0;
}
::google::protobuf::int32 IOArg::dbytes() const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.dbytes)
  return dbytes_;
}
void IOArg::set_dbytes(::google::protobuf::int32 value) {
  
  dbytes_ = value;
  // @@protoc_insertion_point(field_set:graphIR.IOArg.dbytes)
}

// repeated int32 shape = 4;
int IOArg::shape_size() const {
  return shape_.size();
}
void IOArg::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int32 IOArg::shape(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.IOArg.shape)
  return shape_.Get(index);
}
void IOArg::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:graphIR.IOArg.shape)
}
void IOArg::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:graphIR.IOArg.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IOArg::shape() const {
  // @@protoc_insertion_point(field_list:graphIR.IOArg.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IOArg::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.IOArg.shape)
  return &shape_;
}

inline const IOArg* IOArg::internal_default_instance() {
  return &IOArg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitArg::kDbytesFieldNumber;
const int InitArg::kDataBase64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitArg::InitArg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graphid_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graphIR.InitArg)
}

void InitArg::InitAsDefaultInstance() {
}

InitArg::InitArg(const InitArg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graphIR.InitArg)
}

void InitArg::SharedCtor() {
  data_base64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbytes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

InitArg::~InitArg() {
  // @@protoc_insertion_point(destructor:graphIR.InitArg)
  SharedDtor();
}

void InitArg::SharedDtor() {
  data_base64_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitArg_descriptor_;
}

const InitArg& InitArg::default_instance() {
  protobuf_InitDefaults_graphid_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InitArg> InitArg_default_instance_;

InitArg* InitArg::New(::google::protobuf::Arena* arena) const {
  InitArg* n = new InitArg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitArg::Clear() {
// @@protoc_insertion_point(message_clear_start:graphIR.InitArg)
  dbytes_ = GOOGLE_LONGLONG(0);
  data_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graphIR.InitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dbytes = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dbytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_base64;
        break;
      }

      // optional string data_base64 = 2;
      case 2: {
        if (tag == 18) {
         parse_data_base64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_base64()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_base64().data(), this->data_base64().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.InitArg.data_base64"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graphIR.InitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graphIR.InitArg)
  return false;
#undef DO_
}

void InitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graphIR.InitArg)
  // optional int64 dbytes = 1;
  if (this->dbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dbytes(), output);
  }

  // optional string data_base64 = 2;
  if (this->data_base64().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_base64().data(), this->data_base64().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.InitArg.data_base64");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_base64(), output);
  }

  // @@protoc_insertion_point(serialize_end:graphIR.InitArg)
}

::google::protobuf::uint8* InitArg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graphIR.InitArg)
  // optional int64 dbytes = 1;
  if (this->dbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dbytes(), target);
  }

  // optional string data_base64 = 2;
  if (this->data_base64().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_base64().data(), this->data_base64().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.InitArg.data_base64");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_base64(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graphIR.InitArg)
  return target;
}

size_t InitArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphIR.InitArg)
  size_t total_size = 0;

  // optional int64 dbytes = 1;
  if (this->dbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dbytes());
  }

  // optional string data_base64 = 2;
  if (this->data_base64().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_base64());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitArg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graphIR.InitArg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InitArg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitArg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graphIR.InitArg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graphIR.InitArg)
    UnsafeMergeFrom(*source);
  }
}

void InitArg::MergeFrom(const InitArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graphIR.InitArg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InitArg::UnsafeMergeFrom(const InitArg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dbytes() != 0) {
    set_dbytes(from.dbytes());
  }
  if (from.data_base64().size() > 0) {

    data_base64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_base64_);
  }
}

void InitArg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graphIR.InitArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitArg::CopyFrom(const InitArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphIR.InitArg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InitArg::IsInitialized() const {

  return true;
}

void InitArg::Swap(InitArg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitArg::InternalSwap(InitArg* other) {
  std::swap(dbytes_, other->dbytes_);
  data_base64_.Swap(&other->data_base64_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitArg_descriptor_;
  metadata.reflection = InitArg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitArg

// optional int64 dbytes = 1;
void InitArg::clear_dbytes() {
  dbytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InitArg::dbytes() const {
  // @@protoc_insertion_point(field_get:graphIR.InitArg.dbytes)
  return dbytes_;
}
void InitArg::set_dbytes(::google::protobuf::int64 value) {
  
  dbytes_ = value;
  // @@protoc_insertion_point(field_set:graphIR.InitArg.dbytes)
}

// optional string data_base64 = 2;
void InitArg::clear_data_base64() {
  data_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InitArg::data_base64() const {
  // @@protoc_insertion_point(field_get:graphIR.InitArg.data_base64)
  return data_base64_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitArg::set_data_base64(const ::std::string& value) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.InitArg.data_base64)
}
void InitArg::set_data_base64(const char* value) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.InitArg.data_base64)
}
void InitArg::set_data_base64(const char* value, size_t size) {
  
  data_base64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.InitArg.data_base64)
}
::std::string* InitArg::mutable_data_base64() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.InitArg.data_base64)
  return data_base64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitArg::release_data_base64() {
  // @@protoc_insertion_point(field_release:graphIR.InitArg.data_base64)
  
  return data_base64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitArg::set_allocated_data_base64(::std::string* data_base64) {
  if (data_base64 != NULL) {
    
  } else {
    
  }
  data_base64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_base64);
  // @@protoc_insertion_point(field_set_allocated:graphIR.InitArg.data_base64)
}

inline const InitArg* InitArg::internal_default_instance() {
  return &InitArg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNameFieldNumber;
const int Node::kOpFieldNumber;
const int Node::kInputsFieldNumber;
const int Node::kOutputsFieldNumber;
const int Node::kAttrsFieldNumber;
const int Node::kExtAttrsFieldNumber;
const int Node::kInitAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graphid_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graphIR.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graphIR.Node)
}

void Node::SharedCtor() {
  attrs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attrs_.SetEntryDescriptor(
      &::graphIR::Node_AttrsEntry_descriptor_);
  ext_attrs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  ext_attrs_.SetEntryDescriptor(
      &::graphIR::Node_ExtAttrsEntry_descriptor_);
  init_attrs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  init_attrs_.SetEntryDescriptor(
      &::graphIR::Node_InitAttrsEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:graphIR.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  protobuf_InitDefaults_graphid_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Node> Node_default_instance_;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:graphIR.Node)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputs_.Clear();
  outputs_.Clear();
  attrs_.Clear();
  ext_attrs_.Clear();
  init_attrs_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graphIR.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op;
        break;
      }

      // optional string op = 2;
      case 2: {
        if (tag == 18) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.op"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        break;
      }

      // repeated .graphIR.IOArg inputs = 3;
      case 3: {
        if (tag == 26) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_inputs;
        if (input->ExpectTag(34)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .graphIR.IOArg outputs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_outputs;
        if (input->ExpectTag(42)) goto parse_loop_attrs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> attrs = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_attrs:
          Node_AttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.AttrsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.AttrsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_attrs;
        if (input->ExpectTag(50)) goto parse_loop_ext_attrs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> ext_attrs = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ext_attrs:
          Node_ExtAttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ext_attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.ExtAttrsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.ExtAttrsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_ext_attrs;
        if (input->ExpectTag(58)) goto parse_loop_init_attrs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .graphIR.InitArg> init_attrs = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_init_attrs:
          Node_InitAttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::graphIR::InitArg,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::graphIR::InitArg > > parser(&init_attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graphIR.Node.InitAttrsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_init_attrs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graphIR.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graphIR.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graphIR.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.Node.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op(), output);
  }

  // repeated .graphIR.IOArg inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(i), output);
  }

  // repeated .graphIR.IOArg outputs = 4;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputs(i), output);
  }

  // map<string, string> attrs = 5;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.AttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.AttrsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> ext_attrs = 6;
  if (!this->ext_attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.ExtAttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.ExtAttrsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->ext_attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext_attrs().begin();
          it != this->ext_attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_ExtAttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_ExtAttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext_attrs().begin();
          it != this->ext_attrs().end(); ++it) {
        entry.reset(ext_attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .graphIR.InitArg> init_attrs = 7;
  if (!this->init_attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.InitAttrsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->init_attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->init_attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_iterator
          it = this->init_attrs().begin();
          it != this->init_attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_InitAttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(init_attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_InitAttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_iterator
          it = this->init_attrs().begin();
          it != this->init_attrs().end(); ++it) {
        entry.reset(init_attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:graphIR.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graphIR.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graphIR.Node.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op(), target);
  }

  // repeated .graphIR.IOArg inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->inputs(i), false, target);
  }

  // repeated .graphIR.IOArg outputs = 4;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->outputs(i), false, target);
  }

  // map<string, string> attrs = 5;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.AttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.AttrsEntry.value");
      }
    };

    if (deterministic &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> ext_attrs = 6;
  if (!this->ext_attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.ExtAttrsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.ExtAttrsEntry.value");
      }
    };

    if (deterministic &&
        this->ext_attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ext_attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext_attrs().begin();
          it != this->ext_attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_ExtAttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ext_attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_ExtAttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ext_attrs().begin();
          it != this->ext_attrs().end(); ++it) {
        entry.reset(ext_attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .graphIR.InitArg> init_attrs = 7;
  if (!this->init_attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graphIR.Node.InitAttrsEntry.key");
      }
    };

    if (deterministic &&
        this->init_attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->init_attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_iterator
          it = this->init_attrs().begin();
          it != this->init_attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_InitAttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(init_attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_InitAttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_iterator
          it = this->init_attrs().begin();
          it != this->init_attrs().end(); ++it) {
        entry.reset(init_attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:graphIR.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphIR.Node)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // repeated .graphIR.IOArg inputs = 3;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .graphIR.IOArg outputs = 4;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // map<string, string> attrs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  {
    ::google::protobuf::scoped_ptr<Node_AttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attrs().begin();
        it != this->attrs().end(); ++it) {
      entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> ext_attrs = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ext_attrs_size());
  {
    ::google::protobuf::scoped_ptr<Node_ExtAttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ext_attrs().begin();
        it != this->ext_attrs().end(); ++it) {
      entry.reset(ext_attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .graphIR.InitArg> init_attrs = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->init_attrs_size());
  {
    ::google::protobuf::scoped_ptr<Node_InitAttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::graphIR::InitArg >::const_iterator
        it = this->init_attrs().begin();
        it != this->init_attrs().end(); ++it) {
      entry.reset(init_attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graphIR.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graphIR.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graphIR.Node)
    UnsafeMergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graphIR.Node)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Node::UnsafeMergeFrom(const Node& from) {
  GOOGLE_DCHECK(&from != this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  attrs_.MergeFrom(from.attrs_);
  ext_attrs_.MergeFrom(from.ext_attrs_);
  init_attrs_.MergeFrom(from.init_attrs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graphIR.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphIR.Node)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  name_.Swap(&other->name_);
  op_.Swap(&other->op_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  attrs_.Swap(&other->attrs_);
  ext_attrs_.Swap(&other->ext_attrs_);
  init_attrs_.Swap(&other->init_attrs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string name = 1;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:graphIR.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.Node.name)
}
void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.Node.name)
}
void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.Node.name)
}
::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:graphIR.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:graphIR.Node.name)
}

// optional string op = 2;
void Node::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::op() const {
  // @@protoc_insertion_point(field_get:graphIR.Node.op)
  return op_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graphIR.Node.op)
}
void Node::set_op(const char* value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graphIR.Node.op)
}
void Node::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graphIR.Node.op)
}
::std::string* Node::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:graphIR.Node.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_op() {
  // @@protoc_insertion_point(field_release:graphIR.Node.op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:graphIR.Node.op)
}

// repeated .graphIR.IOArg inputs = 3;
int Node::inputs_size() const {
  return inputs_.size();
}
void Node::clear_inputs() {
  inputs_.Clear();
}
const ::graphIR::IOArg& Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Node.inputs)
  return inputs_.Get(index);
}
::graphIR::IOArg* Node::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Node.inputs)
  return inputs_.Mutable(index);
}
::graphIR::IOArg* Node::add_inputs() {
  // @@protoc_insertion_point(field_add:graphIR.Node.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Node.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:graphIR.Node.inputs)
  return inputs_;
}

// repeated .graphIR.IOArg outputs = 4;
int Node::outputs_size() const {
  return outputs_.size();
}
void Node::clear_outputs() {
  outputs_.Clear();
}
const ::graphIR::IOArg& Node::outputs(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Node.outputs)
  return outputs_.Get(index);
}
::graphIR::IOArg* Node::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Node.outputs)
  return outputs_.Mutable(index);
}
::graphIR::IOArg* Node::add_outputs() {
  // @@protoc_insertion_point(field_add:graphIR.Node.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >*
Node::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Node.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::graphIR::IOArg >&
Node::outputs() const {
  // @@protoc_insertion_point(field_list:graphIR.Node.outputs)
  return outputs_;
}

// map<string, string> attrs = 5;
int Node::attrs_size() const {
  return attrs_.size();
}
void Node::clear_attrs() {
  attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.attrs)
  return attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.attrs)
  return attrs_.MutableMap();
}

// map<string, string> ext_attrs = 6;
int Node::ext_attrs_size() const {
  return ext_attrs_.size();
}
void Node::clear_ext_attrs() {
  ext_attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::ext_attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.ext_attrs)
  return ext_attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_ext_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.ext_attrs)
  return ext_attrs_.MutableMap();
}

// map<string, .graphIR.InitArg> init_attrs = 7;
int Node::init_attrs_size() const {
  return init_attrs_.size();
}
void Node::clear_init_attrs() {
  init_attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >&
Node::init_attrs() const {
  // @@protoc_insertion_point(field_map:graphIR.Node.init_attrs)
  return init_attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::graphIR::InitArg >*
Node::mutable_init_attrs() {
  // @@protoc_insertion_point(field_mutable_map:graphIR.Node.init_attrs)
  return init_attrs_.MutableMap();
}

inline const Node* Node::internal_default_instance() {
  return &Node_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kGraphInfoFieldNumber;
const int Graph::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graphid_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graphIR.Graph)
}

void Graph::InitAsDefaultInstance() {
  graph_info_ = const_cast< ::graphIR::GraphInfo*>(
      ::graphIR::GraphInfo::internal_default_instance());
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graphIR.Graph)
}

void Graph::SharedCtor() {
  graph_info_ = NULL;
  _cached_size_ = 0;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:graphIR.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != &Graph_default_instance_.get()) {
    delete graph_info_;
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  protobuf_InitDefaults_graphid_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Graph> Graph_default_instance_;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:graphIR.Graph)
  if (GetArenaNoVirtual() == NULL && graph_info_ != NULL) delete graph_info_;
  graph_info_ = NULL;
  nodes_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graphIR.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .graphIR.GraphInfo graph_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .graphIR.Node nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graphIR.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graphIR.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graphIR.Graph)
  // optional .graphIR.GraphInfo graph_info = 1;
  if (this->has_graph_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->graph_info_, output);
  }

  // repeated .graphIR.Node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:graphIR.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graphIR.Graph)
  // optional .graphIR.GraphInfo graph_info = 1;
  if (this->has_graph_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->graph_info_, false, target);
  }

  // repeated .graphIR.Node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:graphIR.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graphIR.Graph)
  size_t total_size = 0;

  // optional .graphIR.GraphInfo graph_info = 1;
  if (this->has_graph_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_info_);
  }

  // repeated .graphIR.Node nodes = 2;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graphIR.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graphIR.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graphIR.Graph)
    UnsafeMergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graphIR.Graph)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Graph::UnsafeMergeFrom(const Graph& from) {
  GOOGLE_DCHECK(&from != this);
  nodes_.MergeFrom(from.nodes_);
  if (from.has_graph_info()) {
    mutable_graph_info()->::graphIR::GraphInfo::MergeFrom(from.graph_info());
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graphIR.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graphIR.Graph)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Graph::IsInitialized() const {

  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  std::swap(graph_info_, other->graph_info_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// optional .graphIR.GraphInfo graph_info = 1;
bool Graph::has_graph_info() const {
  return this != internal_default_instance() && graph_info_ != NULL;
}
void Graph::clear_graph_info() {
  if (GetArenaNoVirtual() == NULL && graph_info_ != NULL) delete graph_info_;
  graph_info_ = NULL;
}
const ::graphIR::GraphInfo& Graph::graph_info() const {
  // @@protoc_insertion_point(field_get:graphIR.Graph.graph_info)
  return graph_info_ != NULL ? *graph_info_
                         : *::graphIR::GraphInfo::internal_default_instance();
}
::graphIR::GraphInfo* Graph::mutable_graph_info() {
  
  if (graph_info_ == NULL) {
    graph_info_ = new ::graphIR::GraphInfo;
  }
  // @@protoc_insertion_point(field_mutable:graphIR.Graph.graph_info)
  return graph_info_;
}
::graphIR::GraphInfo* Graph::release_graph_info() {
  // @@protoc_insertion_point(field_release:graphIR.Graph.graph_info)
  
  ::graphIR::GraphInfo* temp = graph_info_;
  graph_info_ = NULL;
  return temp;
}
void Graph::set_allocated_graph_info(::graphIR::GraphInfo* graph_info) {
  delete graph_info_;
  graph_info_ = graph_info;
  if (graph_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:graphIR.Graph.graph_info)
}

// repeated .graphIR.Node nodes = 2;
int Graph::nodes_size() const {
  return nodes_.size();
}
void Graph::clear_nodes() {
  nodes_.Clear();
}
const ::graphIR::Node& Graph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:graphIR.Graph.nodes)
  return nodes_.Get(index);
}
::graphIR::Node* Graph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:graphIR.Graph.nodes)
  return nodes_.Mutable(index);
}
::graphIR::Node* Graph::add_nodes() {
  // @@protoc_insertion_point(field_add:graphIR.Graph.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::graphIR::Node >*
Graph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:graphIR.Graph.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::graphIR::Node >&
Graph::nodes() const {
  // @@protoc_insertion_point(field_list:graphIR.Graph.nodes)
  return nodes_;
}

inline const Graph* Graph::internal_default_instance() {
  return &Graph_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graphIR

// @@protoc_insertion_point(global_scope)
