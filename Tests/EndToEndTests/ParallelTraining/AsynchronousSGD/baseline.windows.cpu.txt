CNTK 1.7.2+ (qiwye/asgd-dev 9944ba, Nov  1 2016 16:34:35) on localhost at 2016/11/01 21:13:44

/home/qiwye/git/CNTK-exp-private/build/release/bin/cntk  configfile=03_ResNet-parallel.cntk  parallelTrain=true  deviceId=auto  minibatch=256  epochsize=10
  configName=4gpu-take1  parallelizationMethod=DataParallelASGD  asyncBuffer=false
CNTK 1.7.2+ (qiwye/asgd-dev 9944ba, Nov  1 2016 16:34:35) on localhost at 2016/11/01 21:13:44

/home/qiwye/git/CNTK-exp-private/build/release/bin/cntk  configfile=03_ResNet-parallel.cntk  parallelTrain=true  deviceId=auto  minibatch=256  epochsize=10
  configName=4gpu-take1  parallelizationMethod=DataParallelASGD  asyncBuffer=false
CNTK 1.7.2+ (qiwye/asgd-dev 9944ba, Nov  1 2016 16:34:35) on localhost at 2016/11/01 21:13:44

/home/qiwye/git/CNTK-exp-private/build/release/bin/cntk  configfile=03_ResNet-parallel.cntk  parallelTrain=true  deviceId=auto  minibatch=256  epochsize=10
  configName=4gpu-take1  parallelizationMethod=DataParallelASGD  asyncBuffer=false
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
CNTK 1.7.2+ (qiwye/asgd-dev 9944ba, Nov  1 2016 16:34:35) on localhost at 2016/11/01 21:13:44

/home/qiwye/git/CNTK-exp-private/build/release/bin/cntk  configfile=03_ResNet-parallel.cntk  parallelTrain=true  deviceId=auto  minibatch=256  epochsize=10
  configName=4gpu-take1  parallelizationMethod=DataParallelASGD  asyncBuffer=false
MPIWrapper: initializing MPI
MPIWrapper: initializing MPI
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: 4 nodes pinging each other
ping [requestnodes (before change)]: all 4 nodes responded
requestnodes [MPIWrapper]: using 4 out of 4 MPI nodes (4 requested); we (1) are in (participating)
ping [requestnodes (after change)]: 4 nodes pinging each other
ping [requestnodes (after change)]: all 4 nodes responded
mpihelper: we are cog 1 in a gearbox of 4
ping [mpihelper]: 4 nodes pinging each other
ping [mpihelper]: all 4 nodes responded
ping [requestnodes (before change)]: all 4 nodes responded
-------------------------------------------------------------------
Build info:

                Built time: Nov  1 2016 16:34:35
                Last modified date: Sun Oct  9 17:21:24 2016
                Build type: release
                Build target: GPU
                With 1bit-SGD: yes
                With ASGD: yes
                Math lib: mkl
                CUDA_PATH: /usr/local/cuda-7.5
                CUB_PATH: /usr/local/cub-1.4.1
                CUDNN_PATH: /usr/local/cudnn-5.1
                Build Branch: qiwye/asgd-dev
                Build SHA1: 9944ba4ce647d7435bf27796e45ecd6941351e89 (modified)
                Built by Source/CNTK/buildinfo.h$$0 on msraml-tesla01
                Build Path: /home/qiwye/git/CNTK-exp-private
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info:

                Built time: Nov  1 2016 16:34:35
                Last modified date: Sun Oct  9 17:21:24 2016
                Build type: release
                Build target: GPU
                With 1bit-SGD: yes
                With ASGD: yes
                Math lib: mkl
                CUDA_PATH: /usr/local/cuda-7.5
                CUB_PATH: /usr/local/cub-1.4.1
                CUDNN_PATH: /usr/local/cudnn-5.1
                Build Branch: qiwye/asgd-dev
                Build SHA1: 9944ba4ce647d7435bf27796e45ecd6941351e89 (modified)
                Built by Source/CNTK/buildinfo.h$$0 on msraml-tesla01
                Build Path: /home/qiwye/git/CNTK-exp-private
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info:

                Built time: Nov  1 2016 16:34:35
                Last modified date: Sun Oct  9 17:21:24 2016
                Build type: release
                Build target: GPU
                With 1bit-SGD: yes
                With ASGD: yes
                Math lib: mkl
                CUDA_PATH: /usr/local/cuda-7.5
                CUB_PATH: /usr/local/cub-1.4.1
                CUDNN_PATH: /usr/local/cudnn-5.1
                Build Branch: qiwye/asgd-dev
                Build SHA1: 9944ba4ce647d7435bf27796e45ecd6941351e89 (modified)
                Built by Source/CNTK/buildinfo.h$$0 on msraml-tesla01
                Build Path: /home/qiwye/git/CNTK-exp-private
-------------------------------------------------------------------
-------------------------------------------------------------------
Build info:

                Built time: Nov  1 2016 16:34:35
                Last modified date: Sun Oct  9 17:21:24 2016
                Build type: release
                Build target: GPU
                With 1bit-SGD: yes
                With ASGD: yes
                Math lib: mkl
                CUDA_PATH: /usr/local/cuda-7.5
                CUB_PATH: /usr/local/cub-1.4.1
                CUDNN_PATH: /usr/local/cudnn-5.1
                Build Branch: qiwye/asgd-dev
                Build SHA1: 9944ba4ce647d7435bf27796e45ecd6941351e89 (modified)
                Built by Source/CNTK/buildinfo.h$$0 on msraml-tesla01
                Build Path: /home/qiwye/git/CNTK-exp-private
-------------------------------------------------------------------
-------------------------------------------------------------------
GPU info:

                Device[0]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[1]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[2]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[3]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[4]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[5]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[6]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
                Device[7]: cores = 2880; computeCapability = 3.5; type = "Tesla K40m"; memory = 11439 MB
-------------------------------------------------------------------

MPI Rank 0: Configuration After Processing and Variable Resolution:
MPI Rank 0: 
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:configName=cifar-4gpu-take1
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-cifar-4gpu-take1/Models
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-cifar-4gpu-take1
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-cifar-4gpu-take1/03_ResNet
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 0:     action = "test"
MPI Rank 0:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 0:     minibatchSize = 256
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "center"
MPI Rank 0:             cropRatio = 1
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]    
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 0: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 0:     action = "train"
MPI Rank 0:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 0:      NDLNetworkBuilder = [
MPI Rank 0:         networkDescription = "./03_ResNet.ndl"
MPI Rank 0:     ]
MPI Rank 0:     SGD = [
MPI Rank 0:         epochSize = 0
MPI Rank 0:         minibatchSize = 256
MPI Rank 0:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 0:         momentumPerMB = 0
MPI Rank 0:         maxEpochs = 10
MPI Rank 0:         L2RegWeight = 0.0001
MPI Rank 0:         dropoutRate = 0
MPI Rank 0:         perfTraceLevel = 1
MPI Rank 0:         firstMBsToShowResult = 1
MPI Rank 0:         numMBsToShowResult = 10
MPI Rank 0:         ParallelTrain = [
MPI Rank 0:             parallelizationMethod = DataParallelASGD
MPI Rank 0:             distributedMBReading = "true"
MPI Rank 0:             parallelizationStartEpoch = 1
MPI Rank 0:             DataParallelSGD = [
MPI Rank 0:                 gradientBits = 1
MPI Rank 0:                 useBufferedAsyncGradientAggregation = false
MPI Rank 0:             ]
MPI Rank 0:             ModelAveragingSGD = [
MPI Rank 0:                 blockSizePerWorker = 128
MPI Rank 0:             ]
MPI Rank 0:             DataParallelASGD = [
MPI Rank 0:                 syncPeriod = 128
MPI Rank 0:                 usePipeline = false
MPI Rank 0:             ]
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     reader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 0:         randomize = "auto"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "random"
MPI Rank 0:             cropRatio = 0.8
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]
MPI Rank 0:     cvReader = [
MPI Rank 0:         readerType = "ImageReader"
MPI Rank 0:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 0:         randomize = "none"
MPI Rank 0:         features = [
MPI Rank 0:             width = 32
MPI Rank 0:             height = 32
MPI Rank 0:             channels = 3
MPI Rank 0:             cropType = "center"
MPI Rank 0:             cropRatio = 1
MPI Rank 0:             jitterType = "uniRatio"
MPI Rank 0:             interpolations = "linear"
MPI Rank 0:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 0:         ]
MPI Rank 0:         labels = [
MPI Rank 0:             labelDim = 10
MPI Rank 0:         ]
MPI Rank 0:     ]    
MPI Rank 0: ]
MPI Rank 0: 
MPI Rank 0: Commands: Train
MPI Rank 0: precision = "float"
MPI Rank 0: 
MPI Rank 0: ##############################################################################
MPI Rank 0: #                                                                            #
MPI Rank 0: # Train command (train action)                                               #
MPI Rank 0: #                                                                            #
MPI Rank 0: ##############################################################################
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Creating virgin network.
MPI Rank 0: NDLBuilder Using GPU 7
MPI Rank 0: SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 0: 
MPI Rank 0: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 0: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 0: Using CNTK batch normalization engine.
MPI Rank 0: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 0: 
MPI Rank 0: Model has 184 nodes. Using GPU 7.
MPI Rank 0: 
MPI Rank 0: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 0: Evaluation criterion: Err = ClassificationError
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Allocating matrices for forward and/or backward propagation.
MPI Rank 0: 
MPI Rank 0: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 0: 
MPI Rank 0:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 0:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 0:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 0:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 0:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 0:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 0:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 0:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 0:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 0:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 0:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 0:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 0:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 0:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 0:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 0:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 0:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 0:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 0:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 0:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 0:     { pool : [1 x 1 x 64 x *]
MPI Rank 0:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { OutputNodes.t : [10 x *]
MPI Rank 0:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 0:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 0:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 0:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 0:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 0:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 0:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 0:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 0: 
MPI Rank 0: 
MPI Rank 0: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 0: 
MPI Rank 0:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 0:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 0:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 0:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 0:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 0:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 0:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 0:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 0:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 0:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 0:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 0:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 0: 
MPI Rank 0: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 0: 
MPI Rank 0: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.30574965 * 64; Err = 0.89062500 * 64; time = 3.8302s; samplesPerSecond = 16.7
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 2.89032176 * 576; Err = 0.89583333 * 576; time = 0.8143s; samplesPerSecond = 707.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.34553833 * 640; Err = 0.92031250 * 640; time = 0.6974s; samplesPerSecond = 917.7
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.28704109 * 640; Err = 0.87500000 * 640; time = 0.6107s; samplesPerSecond = 1048.0
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 2.27306671 * 640; Err = 0.86250000 * 640; time = 0.5646s; samplesPerSecond = 1133.4
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 2.22395172 * 640; Err = 0.82968750 * 640; time = 0.5747s; samplesPerSecond = 1113.7
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 2.22442474 * 640; Err = 0.84687500 * 640; time = 0.5617s; samplesPerSecond = 1139.3
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 2.19057159 * 640; Err = 0.82656250 * 640; time = 0.5570s; samplesPerSecond = 1149.0
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 2.08485870 * 640; Err = 0.76406250 * 640; time = 0.5701s; samplesPerSecond = 1122.5
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 2.11713867 * 640; Err = 0.80000000 * 640; time = 0.5675s; samplesPerSecond = 1127.8
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 1.93966064 * 640; Err = 0.75781250 * 640; time = 0.5624s; samplesPerSecond = 1138.1
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 2.02378082 * 640; Err = 0.78281250 * 640; time = 0.5601s; samplesPerSecond = 1142.6
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 1.96661682 * 640; Err = 0.75156250 * 640; time = 0.5648s; samplesPerSecond = 1133.1
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 1.94077454 * 640; Err = 0.74218750 * 640; time = 0.5516s; samplesPerSecond = 1160.3
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.87025452 * 640; Err = 0.69843750 * 640; time = 0.5517s; samplesPerSecond = 1160.0
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.89192200 * 640; Err = 0.71875000 * 640; time = 0.5518s; samplesPerSecond = 1159.9
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.85972290 * 640; Err = 0.72968750 * 640; time = 0.5599s; samplesPerSecond = 1143.0
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.86507874 * 640; Err = 0.69687500 * 640; time = 0.5600s; samplesPerSecond = 1142.8
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.84296875 * 640; Err = 0.72187500 * 640; time = 0.5618s; samplesPerSecond = 1139.1
MPI Rank 0:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.77955322 * 640; Err = 0.68437500 * 640; time = 0.5619s; samplesPerSecond = 1139.0
MPI Rank 0: Finished Epoch[ 1 of 10]: [Training] CE = 2.07322859 * 12500; Err = 0.78112000 * 12500; totalSamplesSeen = 12500; learningRatePerSample = 0.0040000002; epochTime=15.2711s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 2.16806605 * 10000; perplexity = 8.74136235; Err = 0.79580000 * 10000
MPI Rank 0: Finished Epoch[ 1 of 10]: [Validate] CE = 2.16806605 * 10000; Err = 0.79580000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.1'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.80367899 * 64; Err = 0.65625000 * 64; time = 0.0610s; samplesPerSecond = 1049.9
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.73384915 * 576; Err = 0.66840278 * 576; time = 0.5335s; samplesPerSecond = 1079.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.73753166 * 640; Err = 0.66875000 * 640; time = 0.5588s; samplesPerSecond = 1145.3
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.83522644 * 640; Err = 0.69531250 * 640; time = 0.5716s; samplesPerSecond = 1119.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.72330246 * 640; Err = 0.62812500 * 640; time = 0.5761s; samplesPerSecond = 1111.0
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.73935928 * 640; Err = 0.66250000 * 640; time = 0.5604s; samplesPerSecond = 1142.0
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.70959625 * 640; Err = 0.65000000 * 640; time = 0.5841s; samplesPerSecond = 1095.6
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.66714249 * 640; Err = 0.63125000 * 640; time = 0.5618s; samplesPerSecond = 1139.2
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.72503662 * 640; Err = 0.65156250 * 640; time = 0.5555s; samplesPerSecond = 1152.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.63261414 * 640; Err = 0.65781250 * 640; time = 0.5637s; samplesPerSecond = 1135.3
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.76241455 * 640; Err = 0.66406250 * 640; time = 0.5670s; samplesPerSecond = 1128.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.65223846 * 640; Err = 0.64062500 * 640; time = 0.5683s; samplesPerSecond = 1126.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.73850555 * 640; Err = 0.67187500 * 640; time = 0.5668s; samplesPerSecond = 1129.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.58912659 * 640; Err = 0.58906250 * 640; time = 0.5741s; samplesPerSecond = 1114.7
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.66034698 * 640; Err = 0.63593750 * 640; time = 0.5633s; samplesPerSecond = 1136.1
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.68563538 * 640; Err = 0.65156250 * 640; time = 0.5631s; samplesPerSecond = 1136.5
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.64894867 * 640; Err = 0.61093750 * 640; time = 0.5613s; samplesPerSecond = 1140.2
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.60069275 * 640; Err = 0.58906250 * 640; time = 0.5551s; samplesPerSecond = 1153.0
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.64243469 * 640; Err = 0.58906250 * 640; time = 0.5805s; samplesPerSecond = 1102.5
MPI Rank 0:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.49640198 * 640; Err = 0.56406250 * 640; time = 0.5577s; samplesPerSecond = 1147.7
MPI Rank 0: Finished Epoch[ 2 of 10]: [Training] CE = 1.67926328 * 12500; Err = 0.63648000 * 12500; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=11.1202s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.99076837 * 10000; perplexity = 7.32115698; Err = 0.68810000 * 10000
MPI Rank 0: Finished Epoch[ 2 of 10]: [Validate] CE = 1.99076837 * 10000; Err = 0.68810000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.2'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.46739972 * 64; Err = 0.51562500 * 64; time = 0.0628s; samplesPerSecond = 1019.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.49095428 * 576; Err = 0.52951389 * 576; time = 0.5645s; samplesPerSecond = 1020.4
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.52859859 * 640; Err = 0.57656250 * 640; time = 0.5836s; samplesPerSecond = 1096.7
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.54023438 * 640; Err = 0.59687500 * 640; time = 0.5730s; samplesPerSecond = 1116.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.63514824 * 640; Err = 0.60937500 * 640; time = 0.5602s; samplesPerSecond = 1142.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.57038689 * 640; Err = 0.59687500 * 640; time = 0.5535s; samplesPerSecond = 1156.2
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.51003647 * 640; Err = 0.58750000 * 640; time = 0.5737s; samplesPerSecond = 1115.6
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.56054459 * 640; Err = 0.57500000 * 640; time = 0.5513s; samplesPerSecond = 1160.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.47698059 * 640; Err = 0.54687500 * 640; time = 0.5536s; samplesPerSecond = 1156.0
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.48574371 * 640; Err = 0.55468750 * 640; time = 0.5583s; samplesPerSecond = 1146.2
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.49828949 * 640; Err = 0.53437500 * 640; time = 0.5561s; samplesPerSecond = 1150.8
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.58221436 * 640; Err = 0.59375000 * 640; time = 0.5565s; samplesPerSecond = 1150.1
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.47807617 * 640; Err = 0.54687500 * 640; time = 0.5808s; samplesPerSecond = 1101.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.47160950 * 640; Err = 0.52968750 * 640; time = 0.5670s; samplesPerSecond = 1128.8
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.47648163 * 640; Err = 0.54062500 * 640; time = 0.5672s; samplesPerSecond = 1128.3
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.47473297 * 640; Err = 0.54218750 * 640; time = 0.5845s; samplesPerSecond = 1095.0
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.41755524 * 640; Err = 0.53906250 * 640; time = 0.5826s; samplesPerSecond = 1098.5
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.32623596 * 640; Err = 0.49375000 * 640; time = 0.5585s; samplesPerSecond = 1145.9
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.31685944 * 640; Err = 0.45312500 * 640; time = 0.5819s; samplesPerSecond = 1099.8
MPI Rank 0:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.31260986 * 640; Err = 0.45781250 * 640; time = 0.5762s; samplesPerSecond = 1110.8
MPI Rank 0: Finished Epoch[ 3 of 10]: [Training] CE = 1.47610984 * 12500; Err = 0.54568000 * 12500; totalSamplesSeen = 37500; learningRatePerSample = 0.0040000002; epochTime=11.1945s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.54658739 * 10000; perplexity = 4.69541919; Err = 0.53300000 * 10000
MPI Rank 0: Finished Epoch[ 3 of 10]: [Validate] CE = 1.54658739 * 10000; Err = 0.53300000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.3'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.42799067 * 64; Err = 0.53125000 * 64; time = 0.0583s; samplesPerSecond = 1098.4
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.31725727 * 576; Err = 0.46354167 * 576; time = 0.5351s; samplesPerSecond = 1076.5
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.27231846 * 640; Err = 0.45000000 * 640; time = 0.6057s; samplesPerSecond = 1056.6
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.28616428 * 640; Err = 0.47656250 * 640; time = 0.5682s; samplesPerSecond = 1126.4
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.51922379 * 640; Err = 0.55625000 * 640; time = 0.5646s; samplesPerSecond = 1133.6
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.32944031 * 640; Err = 0.48437500 * 640; time = 0.5627s; samplesPerSecond = 1137.4
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.28825302 * 640; Err = 0.47812500 * 640; time = 0.5587s; samplesPerSecond = 1145.5
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.33722382 * 640; Err = 0.48750000 * 640; time = 0.5554s; samplesPerSecond = 1152.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.29964142 * 640; Err = 0.47812500 * 640; time = 0.5703s; samplesPerSecond = 1122.2
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.34078140 * 640; Err = 0.51093750 * 640; time = 0.5664s; samplesPerSecond = 1129.8
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.33001480 * 640; Err = 0.49218750 * 640; time = 0.5644s; samplesPerSecond = 1134.0
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.25323639 * 640; Err = 0.45937500 * 640; time = 0.5619s; samplesPerSecond = 1138.9
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.26031494 * 640; Err = 0.44375000 * 640; time = 0.5766s; samplesPerSecond = 1110.0
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.21255188 * 640; Err = 0.43593750 * 640; time = 0.5755s; samplesPerSecond = 1112.0
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.34987488 * 640; Err = 0.48750000 * 640; time = 0.5758s; samplesPerSecond = 1111.5
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.27329407 * 640; Err = 0.45468750 * 640; time = 0.5762s; samplesPerSecond = 1110.8
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.17203064 * 640; Err = 0.43125000 * 640; time = 0.5890s; samplesPerSecond = 1086.6
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.17685242 * 640; Err = 0.42031250 * 640; time = 0.5738s; samplesPerSecond = 1115.3
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.10932617 * 640; Err = 0.40468750 * 640; time = 0.5641s; samplesPerSecond = 1134.6
MPI Rank 0:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.28425751 * 640; Err = 0.47343750 * 640; time = 0.5706s; samplesPerSecond = 1121.6
MPI Rank 0: Finished Epoch[ 4 of 10]: [Training] CE = 1.28086672 * 12500; Err = 0.46592000 * 12500; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=11.1962s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.23178206 * 10000; perplexity = 3.42733182; Err = 0.44140000 * 10000
MPI Rank 0: Finished Epoch[ 4 of 10]: [Validate] CE = 1.23178206 * 10000; Err = 0.44140000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.4'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.07217813 * 64; Err = 0.35937500 * 64; time = 0.0569s; samplesPerSecond = 1125.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.14733269 * 576; Err = 0.39930556 * 576; time = 0.5284s; samplesPerSecond = 1090.0
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.02118340 * 640; Err = 0.36406250 * 640; time = 0.5922s; samplesPerSecond = 1080.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.12368565 * 640; Err = 0.40000000 * 640; time = 0.5866s; samplesPerSecond = 1091.0
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.04603958 * 640; Err = 0.38437500 * 640; time = 0.5638s; samplesPerSecond = 1135.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.12689285 * 640; Err = 0.41562500 * 640; time = 0.5646s; samplesPerSecond = 1133.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.15703125 * 640; Err = 0.44375000 * 640; time = 0.5679s; samplesPerSecond = 1127.0
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.17090836 * 640; Err = 0.42187500 * 640; time = 0.5755s; samplesPerSecond = 1112.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.05380707 * 640; Err = 0.40156250 * 640; time = 0.5657s; samplesPerSecond = 1131.4
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.05033875 * 640; Err = 0.37656250 * 640; time = 0.5657s; samplesPerSecond = 1131.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.10948334 * 640; Err = 0.39062500 * 640; time = 0.5721s; samplesPerSecond = 1118.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.06501923 * 640; Err = 0.38906250 * 640; time = 0.5598s; samplesPerSecond = 1143.2
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.21959763 * 640; Err = 0.42968750 * 640; time = 0.5706s; samplesPerSecond = 1121.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.15009460 * 640; Err = 0.42343750 * 640; time = 0.5675s; samplesPerSecond = 1127.8
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.07627869 * 640; Err = 0.39843750 * 640; time = 0.5676s; samplesPerSecond = 1127.6
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.03632813 * 640; Err = 0.37968750 * 640; time = 0.5785s; samplesPerSecond = 1106.3
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.90777435 * 640; Err = 0.32812500 * 640; time = 0.5638s; samplesPerSecond = 1135.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.08707275 * 640; Err = 0.40625000 * 640; time = 0.5542s; samplesPerSecond = 1154.8
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.01387177 * 640; Err = 0.36718750 * 640; time = 0.5560s; samplesPerSecond = 1151.1
MPI Rank 0:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.05143890 * 640; Err = 0.37812500 * 640; time = 0.5546s; samplesPerSecond = 1153.9
MPI Rank 0: Finished Epoch[ 5 of 10]: [Training] CE = 1.08251125 * 12500; Err = 0.39376000 * 12500; totalSamplesSeen = 62500; learningRatePerSample = 0.0040000002; epochTime=11.1395s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.27874020 * 10000; perplexity = 3.59211154; Err = 0.43200000 * 10000
MPI Rank 0: Finished Epoch[ 5 of 10]: [Validate] CE = 1.27874020 * 10000; Err = 0.43200000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.5'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.06414127 * 64; Err = 0.35937500 * 64; time = 0.0663s; samplesPerSecond = 965.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.98882590 * 576; Err = 0.35069444 * 576; time = 0.5097s; samplesPerSecond = 1130.1
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.90349989 * 640; Err = 0.33125000 * 640; time = 0.5928s; samplesPerSecond = 1079.5
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.97830448 * 640; Err = 0.33281250 * 640; time = 0.5679s; samplesPerSecond = 1126.9
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.93593655 * 640; Err = 0.32031250 * 640; time = 0.5619s; samplesPerSecond = 1138.9
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.95240631 * 640; Err = 0.32812500 * 640; time = 0.5665s; samplesPerSecond = 1129.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.98666496 * 640; Err = 0.35000000 * 640; time = 0.5702s; samplesPerSecond = 1122.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.03314552 * 640; Err = 0.37656250 * 640; time = 0.5739s; samplesPerSecond = 1115.1
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.95395813 * 640; Err = 0.34218750 * 640; time = 0.5542s; samplesPerSecond = 1154.9
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.01313171 * 640; Err = 0.36250000 * 640; time = 0.5554s; samplesPerSecond = 1152.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.01916275 * 640; Err = 0.36875000 * 640; time = 0.5745s; samplesPerSecond = 1113.9
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.98330078 * 640; Err = 0.36093750 * 640; time = 0.5552s; samplesPerSecond = 1152.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.93450394 * 640; Err = 0.32812500 * 640; time = 0.5721s; samplesPerSecond = 1118.8
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.91730652 * 640; Err = 0.34062500 * 640; time = 0.5706s; samplesPerSecond = 1121.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.89148483 * 640; Err = 0.30625000 * 640; time = 0.5618s; samplesPerSecond = 1139.2
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.80993652 * 640; Err = 0.27656250 * 640; time = 0.5628s; samplesPerSecond = 1137.1
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.91131897 * 640; Err = 0.31562500 * 640; time = 0.5547s; samplesPerSecond = 1153.7
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.95142212 * 640; Err = 0.34531250 * 640; time = 0.5520s; samplesPerSecond = 1159.4
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.88414917 * 640; Err = 0.29531250 * 640; time = 0.5549s; samplesPerSecond = 1153.3
MPI Rank 0:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.95514526 * 640; Err = 0.35000000 * 640; time = 0.5573s; samplesPerSecond = 1148.4
MPI Rank 0: Finished Epoch[ 6 of 10]: [Training] CE = 0.94962453 * 12500; Err = 0.33656000 * 12500; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=11.0619s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.37233935 * 10000; perplexity = 3.94456763; Err = 0.42020000 * 10000
MPI Rank 0: Finished Epoch[ 6 of 10]: [Validate] CE = 1.37233935 * 10000; Err = 0.42020000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.6'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.15642405 * 64; Err = 0.34375000 * 64; time = 0.0603s; samplesPerSecond = 1061.0
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.85009718 * 576; Err = 0.30034722 * 576; time = 0.5265s; samplesPerSecond = 1094.1
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.85025024 * 640; Err = 0.30312500 * 640; time = 0.5700s; samplesPerSecond = 1122.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.85827103 * 640; Err = 0.32187500 * 640; time = 0.6037s; samplesPerSecond = 1060.1
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.72283535 * 640; Err = 0.24687500 * 640; time = 0.5716s; samplesPerSecond = 1119.7
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.76229248 * 640; Err = 0.25937500 * 640; time = 0.5670s; samplesPerSecond = 1128.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.77289162 * 640; Err = 0.27187500 * 640; time = 0.5581s; samplesPerSecond = 1146.7
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.91673050 * 640; Err = 0.33906250 * 640; time = 0.5630s; samplesPerSecond = 1136.8
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.91592979 * 640; Err = 0.31875000 * 640; time = 0.5629s; samplesPerSecond = 1137.0
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.92982330 * 640; Err = 0.34062500 * 640; time = 0.5554s; samplesPerSecond = 1152.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.97162781 * 640; Err = 0.34843750 * 640; time = 0.5703s; samplesPerSecond = 1122.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.80580673 * 640; Err = 0.27187500 * 640; time = 0.5778s; samplesPerSecond = 1107.6
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.78286514 * 640; Err = 0.27968750 * 640; time = 0.5703s; samplesPerSecond = 1122.1
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.85430069 * 640; Err = 0.29843750 * 640; time = 0.5683s; samplesPerSecond = 1126.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.79439926 * 640; Err = 0.27343750 * 640; time = 0.5636s; samplesPerSecond = 1135.6
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.81756516 * 640; Err = 0.29375000 * 640; time = 0.5608s; samplesPerSecond = 1141.2
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.88669739 * 640; Err = 0.31093750 * 640; time = 0.5644s; samplesPerSecond = 1134.0
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.86510468 * 640; Err = 0.29062500 * 640; time = 0.5773s; samplesPerSecond = 1108.6
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.89453583 * 640; Err = 0.28750000 * 640; time = 0.5748s; samplesPerSecond = 1113.4
MPI Rank 0:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.82632294 * 640; Err = 0.29375000 * 640; time = 0.5652s; samplesPerSecond = 1132.4
MPI Rank 0: Finished Epoch[ 7 of 10]: [Training] CE = 0.84645453 * 12500; Err = 0.29728000 * 12500; totalSamplesSeen = 87500; learningRatePerSample = 0.0040000002; epochTime=11.1562s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.28369065 * 10000; perplexity = 3.60993820; Err = 0.38030000 * 10000
MPI Rank 0: Finished Epoch[ 7 of 10]: [Validate] CE = 1.28369065 * 10000; Err = 0.38030000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.7'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.60375458 * 64; Err = 0.18750000 * 64; time = 0.0570s; samplesPerSecond = 1122.4
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.78585359 * 576; Err = 0.27951389 * 576; time = 0.5058s; samplesPerSecond = 1138.7
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.80219789 * 640; Err = 0.25781250 * 640; time = 0.5524s; samplesPerSecond = 1158.7
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.70551662 * 640; Err = 0.24843750 * 640; time = 0.5652s; samplesPerSecond = 1132.2
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.76915436 * 640; Err = 0.26562500 * 640; time = 0.5857s; samplesPerSecond = 1092.7
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.73284264 * 640; Err = 0.24218750 * 640; time = 0.5724s; samplesPerSecond = 1118.2
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.75585060 * 640; Err = 0.27187500 * 640; time = 0.5894s; samplesPerSecond = 1085.8
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.75204124 * 640; Err = 0.27968750 * 640; time = 0.5754s; samplesPerSecond = 1112.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.67774887 * 640; Err = 0.24062500 * 640; time = 0.5685s; samplesPerSecond = 1125.7
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.69991302 * 640; Err = 0.24843750 * 640; time = 0.5561s; samplesPerSecond = 1151.0
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.81533127 * 640; Err = 0.29218750 * 640; time = 0.5728s; samplesPerSecond = 1117.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.80784607 * 640; Err = 0.27968750 * 640; time = 0.5564s; samplesPerSecond = 1150.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.68616638 * 640; Err = 0.24062500 * 640; time = 0.5715s; samplesPerSecond = 1119.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.74510117 * 640; Err = 0.24531250 * 640; time = 0.5618s; samplesPerSecond = 1139.1
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.75967941 * 640; Err = 0.26562500 * 640; time = 0.5770s; samplesPerSecond = 1109.2
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.80479736 * 640; Err = 0.26406250 * 640; time = 0.5595s; samplesPerSecond = 1143.8
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.79755554 * 640; Err = 0.26406250 * 640; time = 0.5722s; samplesPerSecond = 1118.6
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.75603867 * 640; Err = 0.27343750 * 640; time = 0.5632s; samplesPerSecond = 1136.3
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.78338013 * 640; Err = 0.27031250 * 640; time = 0.5595s; samplesPerSecond = 1143.9
MPI Rank 0:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.79557037 * 640; Err = 0.27812500 * 640; time = 0.5520s; samplesPerSecond = 1159.4
MPI Rank 0: Finished Epoch[ 8 of 10]: [Training] CE = 0.75967008 * 12500; Err = 0.26408000 * 12500; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=11.0916s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.13069488 * 10000; perplexity = 3.09780836; Err = 0.37160000 * 10000
MPI Rank 0: Finished Epoch[ 8 of 10]: [Validate] CE = 1.13069488 * 10000; Err = 0.37160000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.8'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.83693427 * 64; Err = 0.32812500 * 64; time = 0.0643s; samplesPerSecond = 996.0
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.73190661 * 576; Err = 0.25868056 * 576; time = 0.5117s; samplesPerSecond = 1125.6
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.72317290 * 640; Err = 0.24843750 * 640; time = 0.5571s; samplesPerSecond = 1148.8
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.68594742 * 640; Err = 0.22812500 * 640; time = 0.5628s; samplesPerSecond = 1137.2
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.68822327 * 640; Err = 0.22656250 * 640; time = 0.5720s; samplesPerSecond = 1118.9
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.70383568 * 640; Err = 0.25000000 * 640; time = 0.5545s; samplesPerSecond = 1154.2
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.69774284 * 640; Err = 0.23437500 * 640; time = 0.5606s; samplesPerSecond = 1141.7
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.69348259 * 640; Err = 0.25468750 * 640; time = 0.5676s; samplesPerSecond = 1127.5
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.84863319 * 640; Err = 0.29687500 * 640; time = 0.5677s; samplesPerSecond = 1127.4
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.75510178 * 640; Err = 0.27031250 * 640; time = 0.5637s; samplesPerSecond = 1135.3
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.71874771 * 640; Err = 0.26406250 * 640; time = 0.5684s; samplesPerSecond = 1126.1
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.66931534 * 640; Err = 0.23593750 * 640; time = 0.5656s; samplesPerSecond = 1131.5
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.76312561 * 640; Err = 0.27656250 * 640; time = 0.5730s; samplesPerSecond = 1117.0
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.59452515 * 640; Err = 0.22187500 * 640; time = 0.5619s; samplesPerSecond = 1139.0
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.67559204 * 640; Err = 0.25156250 * 640; time = 0.5606s; samplesPerSecond = 1141.6
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.71081085 * 640; Err = 0.24531250 * 640; time = 0.5692s; samplesPerSecond = 1124.5
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.71604919 * 640; Err = 0.26250000 * 640; time = 0.5506s; samplesPerSecond = 1162.4
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.71907959 * 640; Err = 0.24843750 * 640; time = 0.5608s; samplesPerSecond = 1141.2
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.68331604 * 640; Err = 0.23593750 * 640; time = 0.5623s; samplesPerSecond = 1138.1
MPI Rank 0:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.67345810 * 640; Err = 0.24062500 * 640; time = 0.5583s; samplesPerSecond = 1146.3
MPI Rank 0: Finished Epoch[ 9 of 10]: [Training] CE = 0.71298063 * 12500; Err = 0.25176000 * 12500; totalSamplesSeen = 112500; learningRatePerSample = 0.0040000002; epochTime=11.0364s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 0.98877509 * 10000; perplexity = 2.68793998; Err = 0.31100000 * 10000
MPI Rank 0: Finished Epoch[ 9 of 10]: [Validate] CE = 0.98877509 * 10000; Err = 0.31100000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet.9'
MPI Rank 0: 
MPI Rank 0: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 0: 
MPI Rank 0: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 0:  Epoch[10 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.44877619 * 64; Err = 0.09375000 * 64; time = 0.0590s; samplesPerSecond = 1083.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.67628045 * 576; Err = 0.23611111 * 576; time = 0.5250s; samplesPerSecond = 1097.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.67143698 * 640; Err = 0.25156250 * 640; time = 0.5764s; samplesPerSecond = 1110.4
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.68186169 * 640; Err = 0.25468750 * 640; time = 0.5938s; samplesPerSecond = 1077.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.63652954 * 640; Err = 0.21093750 * 640; time = 0.5690s; samplesPerSecond = 1124.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.62524261 * 640; Err = 0.22187500 * 640; time = 0.5798s; samplesPerSecond = 1103.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.62477303 * 640; Err = 0.20937500 * 640; time = 0.5818s; samplesPerSecond = 1099.9
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.63831291 * 640; Err = 0.23125000 * 640; time = 0.5809s; samplesPerSecond = 1101.8
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.67607994 * 640; Err = 0.22031250 * 640; time = 0.5738s; samplesPerSecond = 1115.5
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.64013214 * 640; Err = 0.22656250 * 640; time = 0.5699s; samplesPerSecond = 1123.0
MPI Rank 0:  Epoch[10 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.60617599 * 640; Err = 0.20000000 * 640; time = 0.5578s; samplesPerSecond = 1147.3
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.69018936 * 640; Err = 0.25000000 * 640; time = 0.5574s; samplesPerSecond = 1148.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.60248489 * 640; Err = 0.20468750 * 640; time = 0.5589s; samplesPerSecond = 1145.1
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.68369064 * 640; Err = 0.24062500 * 640; time = 0.5717s; samplesPerSecond = 1119.4
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.59835510 * 640; Err = 0.22031250 * 640; time = 0.5642s; samplesPerSecond = 1134.3
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.69473801 * 640; Err = 0.24218750 * 640; time = 0.5564s; samplesPerSecond = 1150.2
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.56873169 * 640; Err = 0.20312500 * 640; time = 0.5657s; samplesPerSecond = 1131.4
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.73694077 * 640; Err = 0.25000000 * 640; time = 0.5641s; samplesPerSecond = 1134.5
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.58791656 * 640; Err = 0.19687500 * 640; time = 0.5631s; samplesPerSecond = 1136.6
MPI Rank 0:  Epoch[10 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.64975662 * 640; Err = 0.22343750 * 640; time = 0.5642s; samplesPerSecond = 1134.4
MPI Rank 0: Finished Epoch[10 of 10]: [Training] CE = 0.64259555 * 12500; Err = 0.22464000 * 12500; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=11.1543s
MPI Rank 0: Final Results: Minibatch[1-40]: CE = 1.02824720 * 10000; perplexity = 2.79616044; Err = 0.33910000 * 10000
MPI Rank 0: Finished Epoch[10 of 10]: [Validate] CE = 1.02824720 * 10000; Err = 0.33910000 * 10000
MPI Rank 0: SGD: Saving checkpoint model './Output-cifar-4gpu-take1/Models/03_ResNet'
MPI Rank 0: ~MultiversoHelper
MPI Rank 0: 
MPI Rank 0: Action "train" complete.
MPI Rank 0: 
MPI Rank 0: COMPLETED.
MPI Rank 0: ~MPIWrapper
MPI Rank 1: Configuration After Processing and Variable Resolution:
MPI Rank 1: 
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:configName=cifar-4gpu-take1
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-cifar-4gpu-take1/Models
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-cifar-4gpu-take1
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-cifar-4gpu-take1/03_ResNet
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 1:     action = "test"
MPI Rank 1:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 1:     minibatchSize = 256
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "center"
MPI Rank 1:             cropRatio = 1
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]    
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 1: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 1:     action = "train"
MPI Rank 1:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 1:      NDLNetworkBuilder = [
MPI Rank 1:         networkDescription = "./03_ResNet.ndl"
MPI Rank 1:     ]
MPI Rank 1:     SGD = [
MPI Rank 1:         epochSize = 0
MPI Rank 1:         minibatchSize = 256
MPI Rank 1:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 1:         momentumPerMB = 0
MPI Rank 1:         maxEpochs = 10
MPI Rank 1:         L2RegWeight = 0.0001
MPI Rank 1:         dropoutRate = 0
MPI Rank 1:         perfTraceLevel = 1
MPI Rank 1:         firstMBsToShowResult = 1
MPI Rank 1:         numMBsToShowResult = 10
MPI Rank 1:         ParallelTrain = [
MPI Rank 1:             parallelizationMethod = DataParallelASGD
MPI Rank 1:             distributedMBReading = "true"
MPI Rank 1:             parallelizationStartEpoch = 1
MPI Rank 1:             DataParallelSGD = [
MPI Rank 1:                 gradientBits = 1
MPI Rank 1:                 useBufferedAsyncGradientAggregation = false
MPI Rank 1:             ]
MPI Rank 1:             ModelAveragingSGD = [
MPI Rank 1:                 blockSizePerWorker = 128
MPI Rank 1:             ]
MPI Rank 1:             DataParallelASGD = [
MPI Rank 1:                 syncPeriod = 128
MPI Rank 1:                 usePipeline = false
MPI Rank 1:             ]
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     reader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 1:         randomize = "auto"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "random"
MPI Rank 1:             cropRatio = 0.8
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]
MPI Rank 1:     cvReader = [
MPI Rank 1:         readerType = "ImageReader"
MPI Rank 1:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 1:         randomize = "none"
MPI Rank 1:         features = [
MPI Rank 1:             width = 32
MPI Rank 1:             height = 32
MPI Rank 1:             channels = 3
MPI Rank 1:             cropType = "center"
MPI Rank 1:             cropRatio = 1
MPI Rank 1:             jitterType = "uniRatio"
MPI Rank 1:             interpolations = "linear"
MPI Rank 1:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 1:         ]
MPI Rank 1:         labels = [
MPI Rank 1:             labelDim = 10
MPI Rank 1:         ]
MPI Rank 1:     ]    
MPI Rank 1: ]
MPI Rank 1: 
MPI Rank 1: Commands: Train
MPI Rank 1: precision = "float"
MPI Rank 1: 
MPI Rank 1: ##############################################################################
MPI Rank 1: #                                                                            #
MPI Rank 1: # Train command (train action)                                               #
MPI Rank 1: #                                                                            #
MPI Rank 1: ##############################################################################
MPI Rank 1: 
MPI Rank 1: LockDevice: Failed to lock GPU 7 for exclusive use.
MPI Rank 1: 
MPI Rank 1: Creating virgin network.
MPI Rank 1: NDLBuilder Using GPU 0
MPI Rank 1: SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 1: 
MPI Rank 1: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 1: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 1: Using CNTK batch normalization engine.
MPI Rank 1: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 1: 
MPI Rank 1: Model has 184 nodes. Using GPU 0.
MPI Rank 1: 
MPI Rank 1: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 1: Evaluation criterion: Err = ClassificationError
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Allocating matrices for forward and/or backward propagation.
MPI Rank 1: 
MPI Rank 1: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 1: 
MPI Rank 1:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 1:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 1:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 1:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 1:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 1:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 1:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 1:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 1:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 1:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 1:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 1:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 1:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 1:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 1:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 1:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 1:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 1:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 1:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 1:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 1:     { pool : [1 x 1 x 64 x *]
MPI Rank 1:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { OutputNodes.t : [10 x *]
MPI Rank 1:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 1:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 1:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 1:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 1:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 1:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 1:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 1:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 1: 
MPI Rank 1: 
MPI Rank 1: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 1: 
MPI Rank 1:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 1:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 1:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 1:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 1:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 1:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 1:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 1:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 1:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 1:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 1:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 1:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 1: 
MPI Rank 1: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 1: 
MPI Rank 1: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.30083942 * 64; Err = 0.84375000 * 64; time = 3.8576s; samplesPerSecond = 16.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 2.70799308 * 576; Err = 0.88194444 * 576; time = 0.8379s; samplesPerSecond = 687.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.30719357 * 640; Err = 0.86875000 * 640; time = 0.6813s; samplesPerSecond = 939.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.28845520 * 640; Err = 0.87343750 * 640; time = 0.5956s; samplesPerSecond = 1074.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 2.27355957 * 640; Err = 0.85781250 * 640; time = 0.5832s; samplesPerSecond = 1097.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 2.24135590 * 640; Err = 0.84062500 * 640; time = 0.5765s; samplesPerSecond = 1110.1
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 2.22652359 * 640; Err = 0.81875000 * 640; time = 0.5839s; samplesPerSecond = 1096.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 2.17914581 * 640; Err = 0.83125000 * 640; time = 0.5803s; samplesPerSecond = 1103.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 2.06651917 * 640; Err = 0.77968750 * 640; time = 0.5747s; samplesPerSecond = 1113.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 2.06171570 * 640; Err = 0.77031250 * 640; time = 0.5942s; samplesPerSecond = 1077.2
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 1.98333740 * 640; Err = 0.78593750 * 640; time = 0.5714s; samplesPerSecond = 1120.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 2.02225952 * 640; Err = 0.75937500 * 640; time = 0.5568s; samplesPerSecond = 1149.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 1.95453186 * 640; Err = 0.75156250 * 640; time = 0.5662s; samplesPerSecond = 1130.4
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 1.91978149 * 640; Err = 0.71875000 * 640; time = 0.5699s; samplesPerSecond = 1123.0
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.86832886 * 640; Err = 0.71406250 * 640; time = 0.5630s; samplesPerSecond = 1136.7
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.90667419 * 640; Err = 0.72656250 * 640; time = 0.5716s; samplesPerSecond = 1119.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.86968994 * 640; Err = 0.70781250 * 640; time = 0.5739s; samplesPerSecond = 1115.3
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.82174683 * 640; Err = 0.71718750 * 640; time = 0.5577s; samplesPerSecond = 1147.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.79994507 * 640; Err = 0.70000000 * 640; time = 0.5742s; samplesPerSecond = 1114.6
MPI Rank 1:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.76583252 * 640; Err = 0.68437500 * 640; time = 0.5607s; samplesPerSecond = 1141.4
MPI Rank 1: Finished Epoch[ 1 of 10]: [Training] CE = 2.05474953 * 12500; Err = 0.77544000 * 12500; totalSamplesSeen = 12500; learningRatePerSample = 0.0040000002; epochTime=15.4684s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 2.35850861 * 10000; perplexity = 10.57516794; Err = 0.75880000 * 10000
MPI Rank 1: Finished Epoch[ 1 of 10]: [Validate] CE = 2.35850861 * 10000; Err = 0.75880000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.80354357 * 64; Err = 0.73437500 * 64; time = 0.0774s; samplesPerSecond = 826.7
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.80651193 * 576; Err = 0.70312500 * 576; time = 0.5126s; samplesPerSecond = 1123.7
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.78637600 * 640; Err = 0.70781250 * 640; time = 0.5764s; samplesPerSecond = 1110.3
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.81074333 * 640; Err = 0.71250000 * 640; time = 0.5774s; samplesPerSecond = 1108.5
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.72936821 * 640; Err = 0.65781250 * 640; time = 0.5772s; samplesPerSecond = 1108.8
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.73829422 * 640; Err = 0.66562500 * 640; time = 0.5888s; samplesPerSecond = 1086.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.64195786 * 640; Err = 0.62656250 * 640; time = 0.5785s; samplesPerSecond = 1106.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.69463196 * 640; Err = 0.66718750 * 640; time = 0.5620s; samplesPerSecond = 1138.7
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.67019043 * 640; Err = 0.64687500 * 640; time = 0.5885s; samplesPerSecond = 1087.6
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.76602173 * 640; Err = 0.65312500 * 640; time = 0.5837s; samplesPerSecond = 1096.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.66130676 * 640; Err = 0.67656250 * 640; time = 0.5571s; samplesPerSecond = 1148.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.71312408 * 640; Err = 0.65625000 * 640; time = 0.5753s; samplesPerSecond = 1112.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.68030548 * 640; Err = 0.63593750 * 640; time = 0.5667s; samplesPerSecond = 1129.3
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.70205078 * 640; Err = 0.63437500 * 640; time = 0.5642s; samplesPerSecond = 1134.4
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.68597107 * 640; Err = 0.63281250 * 640; time = 0.5756s; samplesPerSecond = 1111.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.64128113 * 640; Err = 0.59218750 * 640; time = 0.5872s; samplesPerSecond = 1089.9
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.62829285 * 640; Err = 0.61093750 * 640; time = 0.5633s; samplesPerSecond = 1136.2
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.57516479 * 640; Err = 0.59531250 * 640; time = 0.5793s; samplesPerSecond = 1104.8
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.59235535 * 640; Err = 0.57031250 * 640; time = 0.5857s; samplesPerSecond = 1092.7
MPI Rank 1:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.56494141 * 640; Err = 0.56093750 * 640; time = 0.5768s; samplesPerSecond = 1109.6
MPI Rank 1: Finished Epoch[ 2 of 10]: [Training] CE = 1.68494766 * 12500; Err = 0.64040000 * 12500; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=11.2929s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.81559527 * 10000; perplexity = 6.14473287; Err = 0.62870000 * 10000
MPI Rank 1: Finished Epoch[ 2 of 10]: [Validate] CE = 1.81559527 * 10000; Err = 0.62870000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.64051080 * 64; Err = 0.51562500 * 64; time = 0.0560s; samplesPerSecond = 1143.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.55169484 * 576; Err = 0.56944444 * 576; time = 0.5443s; samplesPerSecond = 1058.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.63903465 * 640; Err = 0.62343750 * 640; time = 0.5756s; samplesPerSecond = 1111.8
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.62134418 * 640; Err = 0.58750000 * 640; time = 0.5809s; samplesPerSecond = 1101.7
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.57975578 * 640; Err = 0.59375000 * 640; time = 0.5676s; samplesPerSecond = 1127.5
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.51065750 * 640; Err = 0.57031250 * 640; time = 0.5738s; samplesPerSecond = 1115.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.57799530 * 640; Err = 0.58125000 * 640; time = 0.5664s; samplesPerSecond = 1130.0
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.53525848 * 640; Err = 0.57031250 * 640; time = 0.5901s; samplesPerSecond = 1084.6
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.51837082 * 640; Err = 0.56718750 * 640; time = 0.5783s; samplesPerSecond = 1106.6
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.50825500 * 640; Err = 0.55000000 * 640; time = 0.5605s; samplesPerSecond = 1141.8
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.53807983 * 640; Err = 0.57656250 * 640; time = 0.5839s; samplesPerSecond = 1096.2
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.41522369 * 640; Err = 0.53437500 * 640; time = 0.5624s; samplesPerSecond = 1138.0
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.43895721 * 640; Err = 0.51406250 * 640; time = 0.5766s; samplesPerSecond = 1109.9
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.46932220 * 640; Err = 0.52968750 * 640; time = 0.5684s; samplesPerSecond = 1126.0
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.41515656 * 640; Err = 0.52343750 * 640; time = 0.5791s; samplesPerSecond = 1105.1
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.36622314 * 640; Err = 0.51406250 * 640; time = 0.5742s; samplesPerSecond = 1114.6
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.31537933 * 640; Err = 0.48281250 * 640; time = 0.5886s; samplesPerSecond = 1087.3
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.34868622 * 640; Err = 0.45000000 * 640; time = 0.5899s; samplesPerSecond = 1084.9
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.34086304 * 640; Err = 0.47500000 * 640; time = 0.5817s; samplesPerSecond = 1100.2
MPI Rank 1:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.32233582 * 640; Err = 0.50156250 * 640; time = 0.5630s; samplesPerSecond = 1136.7
MPI Rank 1: Finished Epoch[ 3 of 10]: [Training] CE = 1.46996375 * 12500; Err = 0.54128000 * 12500; totalSamplesSeen = 37500; learningRatePerSample = 0.0040000002; epochTime=11.3116s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.37206589 * 10000; perplexity = 3.94348909; Err = 0.51190000 * 10000
MPI Rank 1: Finished Epoch[ 3 of 10]: [Validate] CE = 1.37206589 * 10000; Err = 0.51190000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.27139437 * 64; Err = 0.35937500 * 64; time = 0.0594s; samplesPerSecond = 1077.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.23294612 * 576; Err = 0.44791667 * 576; time = 0.5063s; samplesPerSecond = 1137.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.37142115 * 640; Err = 0.48125000 * 640; time = 0.5616s; samplesPerSecond = 1139.7
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.36011562 * 640; Err = 0.47656250 * 640; time = 0.5729s; samplesPerSecond = 1117.0
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.32872086 * 640; Err = 0.49062500 * 640; time = 0.5801s; samplesPerSecond = 1103.3
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.32640953 * 640; Err = 0.48750000 * 640; time = 0.5778s; samplesPerSecond = 1107.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.38011093 * 640; Err = 0.50937500 * 640; time = 0.5731s; samplesPerSecond = 1116.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.33734589 * 640; Err = 0.49843750 * 640; time = 0.5803s; samplesPerSecond = 1102.9
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.22671585 * 640; Err = 0.43281250 * 640; time = 0.5829s; samplesPerSecond = 1098.0
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.22042542 * 640; Err = 0.43750000 * 640; time = 0.5761s; samplesPerSecond = 1110.9
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.36924362 * 640; Err = 0.49687500 * 640; time = 0.5808s; samplesPerSecond = 1102.0
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.23840179 * 640; Err = 0.43437500 * 640; time = 0.5661s; samplesPerSecond = 1130.6
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.22506104 * 640; Err = 0.47968750 * 640; time = 0.5775s; samplesPerSecond = 1108.2
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.17023773 * 640; Err = 0.40156250 * 640; time = 0.5609s; samplesPerSecond = 1141.1
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.19994812 * 640; Err = 0.44531250 * 640; time = 0.5806s; samplesPerSecond = 1102.4
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.13266449 * 640; Err = 0.41562500 * 640; time = 0.5847s; samplesPerSecond = 1094.7
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.18743896 * 640; Err = 0.42812500 * 640; time = 0.5937s; samplesPerSecond = 1078.0
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.21168213 * 640; Err = 0.45000000 * 640; time = 0.5910s; samplesPerSecond = 1082.8
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.20343323 * 640; Err = 0.44062500 * 640; time = 0.5755s; samplesPerSecond = 1112.0
MPI Rank 1:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.11318817 * 640; Err = 0.40625000 * 640; time = 0.5680s; samplesPerSecond = 1126.8
MPI Rank 1: Finished Epoch[ 4 of 10]: [Training] CE = 1.25056164 * 12500; Err = 0.45288000 * 12500; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=11.2755s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.15751247 * 10000; perplexity = 3.18200807; Err = 0.41770000 * 10000
MPI Rank 1: Finished Epoch[ 4 of 10]: [Validate] CE = 1.15751247 * 10000; Err = 0.41770000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.34552574 * 64; Err = 0.45312500 * 64; time = 0.0654s; samplesPerSecond = 978.5
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.10506026 * 576; Err = 0.40277778 * 576; time = 0.5304s; samplesPerSecond = 1085.9
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.11178503 * 640; Err = 0.41250000 * 640; time = 0.5705s; samplesPerSecond = 1121.7
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.10898533 * 640; Err = 0.41093750 * 640; time = 0.5741s; samplesPerSecond = 1114.9
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.23600464 * 640; Err = 0.45156250 * 640; time = 0.5711s; samplesPerSecond = 1120.7
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.16672134 * 640; Err = 0.43281250 * 640; time = 0.5750s; samplesPerSecond = 1113.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.19169159 * 640; Err = 0.40937500 * 640; time = 0.5838s; samplesPerSecond = 1096.2
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.18004074 * 640; Err = 0.42968750 * 640; time = 0.5799s; samplesPerSecond = 1103.6
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.07133713 * 640; Err = 0.38750000 * 640; time = 0.5669s; samplesPerSecond = 1129.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.09211655 * 640; Err = 0.42968750 * 640; time = 0.5756s; samplesPerSecond = 1111.9
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.12022400 * 640; Err = 0.41875000 * 640; time = 0.5589s; samplesPerSecond = 1145.0
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.09665222 * 640; Err = 0.38437500 * 640; time = 0.5587s; samplesPerSecond = 1145.5
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.13027573 * 640; Err = 0.40625000 * 640; time = 0.5720s; samplesPerSecond = 1118.9
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.01721344 * 640; Err = 0.35781250 * 640; time = 0.5695s; samplesPerSecond = 1123.7
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.99481964 * 640; Err = 0.37500000 * 640; time = 0.5673s; samplesPerSecond = 1128.2
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.99857178 * 640; Err = 0.35156250 * 640; time = 0.5617s; samplesPerSecond = 1139.3
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.05692291 * 640; Err = 0.39062500 * 640; time = 0.5693s; samplesPerSecond = 1124.1
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.98379211 * 640; Err = 0.36406250 * 640; time = 0.5638s; samplesPerSecond = 1135.1
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.02066956 * 640; Err = 0.35468750 * 640; time = 0.5819s; samplesPerSecond = 1099.8
MPI Rank 1:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.00721130 * 640; Err = 0.35937500 * 640; time = 0.5909s; samplesPerSecond = 1083.0
MPI Rank 1: Finished Epoch[ 5 of 10]: [Training] CE = 1.08654430 * 12500; Err = 0.39440000 * 12500; totalSamplesSeen = 62500; learningRatePerSample = 0.0040000002; epochTime=11.2269s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.33545002 * 10000; perplexity = 3.80170639; Err = 0.44100000 * 10000
MPI Rank 1: Finished Epoch[ 5 of 10]: [Validate] CE = 1.33545002 * 10000; Err = 0.44100000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.94135880 * 64; Err = 0.35937500 * 64; time = 0.0592s; samplesPerSecond = 1080.4
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.96103072 * 576; Err = 0.35069444 * 576; time = 0.5055s; samplesPerSecond = 1139.5
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.91155510 * 640; Err = 0.33750000 * 640; time = 0.5812s; samplesPerSecond = 1101.2
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.98851509 * 640; Err = 0.37968750 * 640; time = 0.5535s; samplesPerSecond = 1156.3
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.01444454 * 640; Err = 0.39062500 * 640; time = 0.5721s; samplesPerSecond = 1118.7
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.09502373 * 640; Err = 0.39687500 * 640; time = 0.5880s; samplesPerSecond = 1088.4
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.93824120 * 640; Err = 0.34375000 * 640; time = 0.5604s; samplesPerSecond = 1142.1
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.02042961 * 640; Err = 0.37187500 * 640; time = 0.5624s; samplesPerSecond = 1138.0
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.92471695 * 640; Err = 0.35312500 * 640; time = 0.5679s; samplesPerSecond = 1126.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.99100266 * 640; Err = 0.36718750 * 640; time = 0.5746s; samplesPerSecond = 1113.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.95939941 * 640; Err = 0.32343750 * 640; time = 0.5779s; samplesPerSecond = 1107.4
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.98554459 * 640; Err = 0.36875000 * 640; time = 0.5785s; samplesPerSecond = 1106.3
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.92655029 * 640; Err = 0.33593750 * 640; time = 0.5847s; samplesPerSecond = 1094.6
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.89183502 * 640; Err = 0.31406250 * 640; time = 0.5715s; samplesPerSecond = 1119.8
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.97341003 * 640; Err = 0.35000000 * 640; time = 0.5754s; samplesPerSecond = 1112.2
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.93071899 * 640; Err = 0.31093750 * 640; time = 0.5639s; samplesPerSecond = 1134.9
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.92866669 * 640; Err = 0.32031250 * 640; time = 0.5728s; samplesPerSecond = 1117.3
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.92690277 * 640; Err = 0.35468750 * 640; time = 0.5841s; samplesPerSecond = 1095.7
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.83481750 * 640; Err = 0.30000000 * 640; time = 0.5797s; samplesPerSecond = 1104.0
MPI Rank 1:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.86773682 * 640; Err = 0.29843750 * 640; time = 0.5654s; samplesPerSecond = 1131.9
MPI Rank 1: Finished Epoch[ 6 of 10]: [Training] CE = 0.94854219 * 12500; Err = 0.34512000 * 12500; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=11.2135s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.95296471 * 10000; perplexity = 2.59338690; Err = 0.32730000 * 10000
MPI Rank 1: Finished Epoch[ 6 of 10]: [Validate] CE = 0.95296471 * 10000; Err = 0.32730000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.04344320 * 64; Err = 0.37500000 * 64; time = 0.0664s; samplesPerSecond = 963.6
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.80521313 * 576; Err = 0.27430556 * 576; time = 0.5167s; samplesPerSecond = 1114.7
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.80899677 * 640; Err = 0.27968750 * 640; time = 0.5765s; samplesPerSecond = 1110.1
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.96370544 * 640; Err = 0.34218750 * 640; time = 0.5556s; samplesPerSecond = 1151.8
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.85952644 * 640; Err = 0.31875000 * 640; time = 0.5826s; samplesPerSecond = 1098.4
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.94631844 * 640; Err = 0.34531250 * 640; time = 0.5758s; samplesPerSecond = 1111.6
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.89382553 * 640; Err = 0.31718750 * 640; time = 0.5771s; samplesPerSecond = 1108.9
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.86283302 * 640; Err = 0.29843750 * 640; time = 0.5755s; samplesPerSecond = 1112.1
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.94492493 * 640; Err = 0.35156250 * 640; time = 0.5718s; samplesPerSecond = 1119.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.83741150 * 640; Err = 0.28593750 * 640; time = 0.5801s; samplesPerSecond = 1103.4
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.82801056 * 640; Err = 0.31406250 * 640; time = 0.5654s; samplesPerSecond = 1132.0
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.79422379 * 640; Err = 0.30000000 * 640; time = 0.5548s; samplesPerSecond = 1153.5
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.83680878 * 640; Err = 0.29687500 * 640; time = 0.5685s; samplesPerSecond = 1125.8
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.91582870 * 640; Err = 0.32656250 * 640; time = 0.5642s; samplesPerSecond = 1134.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.91015930 * 640; Err = 0.32656250 * 640; time = 0.5708s; samplesPerSecond = 1121.3
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.85526657 * 640; Err = 0.30781250 * 640; time = 0.5771s; samplesPerSecond = 1109.0
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.89267120 * 640; Err = 0.28906250 * 640; time = 0.5736s; samplesPerSecond = 1115.8
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.87919006 * 640; Err = 0.32187500 * 640; time = 0.5695s; samplesPerSecond = 1123.9
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.77696075 * 640; Err = 0.27812500 * 640; time = 0.5634s; samplesPerSecond = 1136.0
MPI Rank 1:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.69739075 * 640; Err = 0.24531250 * 640; time = 0.5602s; samplesPerSecond = 1142.4
MPI Rank 1: Finished Epoch[ 7 of 10]: [Training] CE = 0.85802828 * 12500; Err = 0.30632000 * 12500; totalSamplesSeen = 87500; learningRatePerSample = 0.0040000002; epochTime=11.1665s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.95418565 * 10000; perplexity = 2.59655522; Err = 0.32220000 * 10000
MPI Rank 1: Finished Epoch[ 7 of 10]: [Validate] CE = 0.95418565 * 10000; Err = 0.32220000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.84589005 * 64; Err = 0.26562500 * 64; time = 0.0692s; samplesPerSecond = 925.5
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.76353582 * 576; Err = 0.26041667 * 576; time = 0.5146s; samplesPerSecond = 1119.4
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.73207979 * 640; Err = 0.27500000 * 640; time = 0.5871s; samplesPerSecond = 1090.1
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.72951136 * 640; Err = 0.25000000 * 640; time = 0.5959s; samplesPerSecond = 1074.0
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.74998875 * 640; Err = 0.26718750 * 640; time = 0.5839s; samplesPerSecond = 1096.1
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.77898712 * 640; Err = 0.26250000 * 640; time = 0.5559s; samplesPerSecond = 1151.4
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.77976341 * 640; Err = 0.26250000 * 640; time = 0.5543s; samplesPerSecond = 1154.6
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.80794754 * 640; Err = 0.27187500 * 640; time = 0.5842s; samplesPerSecond = 1095.5
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.81112709 * 640; Err = 0.29218750 * 640; time = 0.5642s; samplesPerSecond = 1134.3
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.79283905 * 640; Err = 0.29218750 * 640; time = 0.6094s; samplesPerSecond = 1050.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.71288147 * 640; Err = 0.26406250 * 640; time = 0.5609s; samplesPerSecond = 1140.9
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.80150070 * 640; Err = 0.27500000 * 640; time = 0.5854s; samplesPerSecond = 1093.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.67035599 * 640; Err = 0.23593750 * 640; time = 0.5664s; samplesPerSecond = 1129.9
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.82439270 * 640; Err = 0.28437500 * 640; time = 0.5852s; samplesPerSecond = 1093.6
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.76739120 * 640; Err = 0.26718750 * 640; time = 0.5630s; samplesPerSecond = 1136.8
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.76545181 * 640; Err = 0.26093750 * 640; time = 0.5723s; samplesPerSecond = 1118.2
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.81430664 * 640; Err = 0.30000000 * 640; time = 0.5631s; samplesPerSecond = 1136.5
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.68467484 * 640; Err = 0.23906250 * 640; time = 0.5746s; samplesPerSecond = 1113.8
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.75321655 * 640; Err = 0.26718750 * 640; time = 0.5693s; samplesPerSecond = 1124.1
MPI Rank 1:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.67292175 * 640; Err = 0.23437500 * 640; time = 0.5732s; samplesPerSecond = 1116.5
MPI Rank 1: Finished Epoch[ 8 of 10]: [Training] CE = 0.75764375 * 12500; Err = 0.26576000 * 12500; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=11.2717s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.08031812 * 10000; perplexity = 2.94561648; Err = 0.34270000 * 10000
MPI Rank 1: Finished Epoch[ 8 of 10]: [Validate] CE = 1.08031812 * 10000; Err = 0.34270000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.72163218 * 64; Err = 0.23437500 * 64; time = 0.0622s; samplesPerSecond = 1028.7
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.75976651 * 576; Err = 0.28819444 * 576; time = 0.5026s; samplesPerSecond = 1146.1
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.68098435 * 640; Err = 0.23281250 * 640; time = 0.5558s; samplesPerSecond = 1151.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.63974848 * 640; Err = 0.21875000 * 640; time = 0.5745s; samplesPerSecond = 1113.9
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.77567158 * 640; Err = 0.24218750 * 640; time = 0.5722s; samplesPerSecond = 1118.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.74452553 * 640; Err = 0.25937500 * 640; time = 0.5635s; samplesPerSecond = 1135.8
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.70387344 * 640; Err = 0.25000000 * 640; time = 0.5701s; samplesPerSecond = 1122.6
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.74246864 * 640; Err = 0.24218750 * 640; time = 0.5731s; samplesPerSecond = 1116.8
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.74221268 * 640; Err = 0.24843750 * 640; time = 0.5790s; samplesPerSecond = 1105.3
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.72732162 * 640; Err = 0.26093750 * 640; time = 0.5711s; samplesPerSecond = 1120.7
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.74955978 * 640; Err = 0.26093750 * 640; time = 0.5676s; samplesPerSecond = 1127.5
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.73741150 * 640; Err = 0.26250000 * 640; time = 0.5669s; samplesPerSecond = 1129.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.75905914 * 640; Err = 0.28906250 * 640; time = 0.5617s; samplesPerSecond = 1139.3
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.75048065 * 640; Err = 0.26562500 * 640; time = 0.5745s; samplesPerSecond = 1114.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.70924377 * 640; Err = 0.25468750 * 640; time = 0.5672s; samplesPerSecond = 1128.4
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.67019730 * 640; Err = 0.23125000 * 640; time = 0.5644s; samplesPerSecond = 1134.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.65673370 * 640; Err = 0.22187500 * 640; time = 0.5632s; samplesPerSecond = 1136.4
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.68816071 * 640; Err = 0.25156250 * 640; time = 0.5694s; samplesPerSecond = 1124.0
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.60683746 * 640; Err = 0.20781250 * 640; time = 0.5639s; samplesPerSecond = 1134.9
MPI Rank 1:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.71740112 * 640; Err = 0.25468750 * 640; time = 0.5709s; samplesPerSecond = 1121.1
MPI Rank 1: Finished Epoch[ 9 of 10]: [Training] CE = 0.71183961 * 12500; Err = 0.24920000 * 12500; totalSamplesSeen = 112500; learningRatePerSample = 0.0040000002; epochTime=11.1405s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 1.26113760 * 10000; perplexity = 3.52943429; Err = 0.38430000 * 10000
MPI Rank 1: Finished Epoch[ 9 of 10]: [Validate] CE = 1.26113760 * 10000; Err = 0.38430000 * 10000
MPI Rank 1: 
MPI Rank 1: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 1: 
MPI Rank 1: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 1:  Epoch[10 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.90936476 * 64; Err = 0.37500000 * 64; time = 0.0670s; samplesPerSecond = 955.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.64978758 * 576; Err = 0.21527778 * 576; time = 0.5295s; samplesPerSecond = 1087.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.62233620 * 640; Err = 0.21562500 * 640; time = 0.5765s; samplesPerSecond = 1110.1
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.73667822 * 640; Err = 0.24062500 * 640; time = 0.5635s; samplesPerSecond = 1135.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.64711914 * 640; Err = 0.22812500 * 640; time = 0.5760s; samplesPerSecond = 1111.0
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.59679317 * 640; Err = 0.20781250 * 640; time = 0.5726s; samplesPerSecond = 1117.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.68406372 * 640; Err = 0.23281250 * 640; time = 0.5630s; samplesPerSecond = 1136.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.67082939 * 640; Err = 0.24062500 * 640; time = 0.5474s; samplesPerSecond = 1169.2
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.64872589 * 640; Err = 0.21875000 * 640; time = 0.5460s; samplesPerSecond = 1172.1
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.61480904 * 640; Err = 0.22500000 * 640; time = 0.5711s; samplesPerSecond = 1120.6
MPI Rank 1:  Epoch[10 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.69933777 * 640; Err = 0.24062500 * 640; time = 0.5660s; samplesPerSecond = 1130.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.56154633 * 640; Err = 0.20468750 * 640; time = 0.5514s; samplesPerSecond = 1160.8
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.65119781 * 640; Err = 0.21250000 * 640; time = 0.5840s; samplesPerSecond = 1096.0
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.56111603 * 640; Err = 0.19843750 * 640; time = 0.5664s; samplesPerSecond = 1130.0
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.64066620 * 640; Err = 0.22187500 * 640; time = 0.5709s; samplesPerSecond = 1121.0
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.55831070 * 640; Err = 0.19531250 * 640; time = 0.5572s; samplesPerSecond = 1148.5
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.60751724 * 640; Err = 0.20625000 * 640; time = 0.5499s; samplesPerSecond = 1163.9
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.69202042 * 640; Err = 0.25781250 * 640; time = 0.5566s; samplesPerSecond = 1149.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.68057556 * 640; Err = 0.23437500 * 640; time = 0.5685s; samplesPerSecond = 1125.7
MPI Rank 1:  Epoch[10 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.60533752 * 640; Err = 0.20000000 * 640; time = 0.5647s; samplesPerSecond = 1133.3
MPI Rank 1: Finished Epoch[10 of 10]: [Training] CE = 0.64088211 * 12500; Err = 0.22208000 * 12500; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=11.0758s
MPI Rank 1: Final Results: Minibatch[1-40]: CE = 0.86816403 * 10000; perplexity = 2.38253259; Err = 0.28020000 * 10000
MPI Rank 1: Finished Epoch[10 of 10]: [Validate] CE = 0.86816403 * 10000; Err = 0.28020000 * 10000
MPI Rank 1: ~MultiversoHelper
MPI Rank 1: 
MPI Rank 1: Action "train" complete.
MPI Rank 1: 
MPI Rank 1: COMPLETED.
MPI Rank 1: ~MPIWrapper
MPI Rank 2: Configuration After Processing and Variable Resolution:
MPI Rank 2: 
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:configName=cifar-4gpu-take1
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-cifar-4gpu-take1/Models
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-cifar-4gpu-take1
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-cifar-4gpu-take1/03_ResNet
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 2:     action = "test"
MPI Rank 2:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 2:     minibatchSize = 256
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "ImageReader"
MPI Rank 2:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         features = [
MPI Rank 2:             width = 32
MPI Rank 2:             height = 32
MPI Rank 2:             channels = 3
MPI Rank 2:             cropType = "center"
MPI Rank 2:             cropRatio = 1
MPI Rank 2:             jitterType = "uniRatio"
MPI Rank 2:             interpolations = "linear"
MPI Rank 2:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             labelDim = 10
MPI Rank 2:         ]
MPI Rank 2:     ]    
MPI Rank 2: ]
MPI Rank 2: 
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 2: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 2:     action = "train"
MPI Rank 2:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 2:      NDLNetworkBuilder = [
MPI Rank 2:         networkDescription = "./03_ResNet.ndl"
MPI Rank 2:     ]
MPI Rank 2:     SGD = [
MPI Rank 2:         epochSize = 0
MPI Rank 2:         minibatchSize = 256
MPI Rank 2:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 2:         momentumPerMB = 0
MPI Rank 2:         maxEpochs = 10
MPI Rank 2:         L2RegWeight = 0.0001
MPI Rank 2:         dropoutRate = 0
MPI Rank 2:         perfTraceLevel = 1
MPI Rank 2:         firstMBsToShowResult = 1
MPI Rank 2:         numMBsToShowResult = 10
MPI Rank 2:         ParallelTrain = [
MPI Rank 2:             parallelizationMethod = DataParallelASGD
MPI Rank 2:             distributedMBReading = "true"
MPI Rank 2:             parallelizationStartEpoch = 1
MPI Rank 2:             DataParallelSGD = [
MPI Rank 2:                 gradientBits = 1
MPI Rank 2:                 useBufferedAsyncGradientAggregation = false
MPI Rank 2:             ]
MPI Rank 2:             ModelAveragingSGD = [
MPI Rank 2:                 blockSizePerWorker = 128
MPI Rank 2:             ]
MPI Rank 2:             DataParallelASGD = [
MPI Rank 2:                 syncPeriod = 128
MPI Rank 2:                 usePipeline = false
MPI Rank 2:             ]
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     reader = [
MPI Rank 2:         readerType = "ImageReader"
MPI Rank 2:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 2:         randomize = "auto"
MPI Rank 2:         features = [
MPI Rank 2:             width = 32
MPI Rank 2:             height = 32
MPI Rank 2:             channels = 3
MPI Rank 2:             cropType = "random"
MPI Rank 2:             cropRatio = 0.8
MPI Rank 2:             jitterType = "uniRatio"
MPI Rank 2:             interpolations = "linear"
MPI Rank 2:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             labelDim = 10
MPI Rank 2:         ]
MPI Rank 2:     ]
MPI Rank 2:     cvReader = [
MPI Rank 2:         readerType = "ImageReader"
MPI Rank 2:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 2:         randomize = "none"
MPI Rank 2:         features = [
MPI Rank 2:             width = 32
MPI Rank 2:             height = 32
MPI Rank 2:             channels = 3
MPI Rank 2:             cropType = "center"
MPI Rank 2:             cropRatio = 1
MPI Rank 2:             jitterType = "uniRatio"
MPI Rank 2:             interpolations = "linear"
MPI Rank 2:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 2:         ]
MPI Rank 2:         labels = [
MPI Rank 2:             labelDim = 10
MPI Rank 2:         ]
MPI Rank 2:     ]    
MPI Rank 2: ]
MPI Rank 2: 
MPI Rank 2: Commands: Train
MPI Rank 2: precision = "float"
MPI Rank 2: 
MPI Rank 2: ##############################################################################
MPI Rank 2: #                                                                            #
MPI Rank 2: # Train command (train action)                                               #
MPI Rank 2: #                                                                            #
MPI Rank 2: ##############################################################################
MPI Rank 2: 
MPI Rank 2: LockDevice: Failed to lock GPU 0 for exclusive use.
MPI Rank 2: LockDevice: Failed to lock GPU 7 for exclusive use.
MPI Rank 2: 
MPI Rank 2: Creating virgin network.
MPI Rank 2: NDLBuilder Using GPU 1
MPI Rank 2: SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 2: 
MPI Rank 2: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 2: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 2: Using CNTK batch normalization engine.
MPI Rank 2: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 2: 
MPI Rank 2: Model has 184 nodes. Using GPU 1.
MPI Rank 2: 
MPI Rank 2: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 2: Evaluation criterion: Err = ClassificationError
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Allocating matrices for forward and/or backward propagation.
MPI Rank 2: 
MPI Rank 2: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 2: 
MPI Rank 2:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 2:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 2:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 2:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 2:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 2:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 2:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 2:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 2:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 2:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 2:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 2:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 2:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 2:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 2:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 2:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 2:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 2:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 2:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 2:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 2:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 2:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 2:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 2:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 2:     { pool : [1 x 1 x 64 x *]
MPI Rank 2:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { OutputNodes.t : [10 x *]
MPI Rank 2:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 2:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 2:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 2:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 2:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 2:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 2:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 2:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 2:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 2:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 2:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 2:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 2:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 2:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 2:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 2:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 2:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 2:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 2:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 2:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 2:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 2:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 2:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 2:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 2:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 2:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 2:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 2:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 2:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 2:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 2: 
MPI Rank 2: 
MPI Rank 2: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 2: 
MPI Rank 2:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 2:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 2:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 2:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 2:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 2:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 2:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 2:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 2:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 2:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 2:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 2:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 2:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 2:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 2:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 2:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 2:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 2:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 2:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 2:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 2: 
MPI Rank 2: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 2: 
MPI Rank 2: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.30191112 * 64; Err = 0.89062500 * 64; time = 3.8266s; samplesPerSecond = 16.7
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 3.05888338 * 576; Err = 0.89409722 * 576; time = 0.8463s; samplesPerSecond = 680.6
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.33684597 * 640; Err = 0.89375000 * 640; time = 0.6296s; samplesPerSecond = 1016.4
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.29222221 * 640; Err = 0.88906250 * 640; time = 0.5574s; samplesPerSecond = 1148.2
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 2.28100815 * 640; Err = 0.87968750 * 640; time = 0.5298s; samplesPerSecond = 1208.0
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 2.25712967 * 640; Err = 0.84375000 * 640; time = 0.5168s; samplesPerSecond = 1238.4
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 2.21734467 * 640; Err = 0.83750000 * 640; time = 0.5341s; samplesPerSecond = 1198.2
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 2.19537811 * 640; Err = 0.83125000 * 640; time = 0.5245s; samplesPerSecond = 1220.2
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 2.16404877 * 640; Err = 0.81406250 * 640; time = 0.5299s; samplesPerSecond = 1207.9
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 2.06781616 * 640; Err = 0.78593750 * 640; time = 0.5307s; samplesPerSecond = 1205.9
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 2.10489502 * 640; Err = 0.80937500 * 640; time = 0.5453s; samplesPerSecond = 1173.8
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 1.99063110 * 640; Err = 0.75781250 * 640; time = 0.5314s; samplesPerSecond = 1204.4
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 2.05094299 * 640; Err = 0.80468750 * 640; time = 0.5243s; samplesPerSecond = 1220.6
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 2.02254944 * 640; Err = 0.76718750 * 640; time = 0.5312s; samplesPerSecond = 1204.8
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.95782471 * 640; Err = 0.75000000 * 640; time = 0.5329s; samplesPerSecond = 1200.9
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.87959290 * 640; Err = 0.67500000 * 640; time = 0.5290s; samplesPerSecond = 1209.8
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.87398682 * 640; Err = 0.72656250 * 640; time = 0.5253s; samplesPerSecond = 1218.5
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.85114136 * 640; Err = 0.70781250 * 640; time = 0.5208s; samplesPerSecond = 1228.8
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.86398621 * 640; Err = 0.70781250 * 640; time = 0.5253s; samplesPerSecond = 1218.2
MPI Rank 2:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.80964966 * 640; Err = 0.70000000 * 640; time = 0.5158s; samplesPerSecond = 1240.8
MPI Rank 2: Finished Epoch[ 1 of 10]: [Training] CE = 2.10736812 * 12500; Err = 0.79064000 * 12500; totalSamplesSeen = 12500; learningRatePerSample = 0.0040000002; epochTime=14.6198s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 2.37534130 * 10000; perplexity = 10.75468310; Err = 0.78140000 * 10000
MPI Rank 2: Finished Epoch[ 1 of 10]: [Validate] CE = 2.37534130 * 10000; Err = 0.78140000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.69601536 * 64; Err = 0.62500000 * 64; time = 0.0594s; samplesPerSecond = 1077.6
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.70346059 * 576; Err = 0.66666667 * 576; time = 0.5647s; samplesPerSecond = 1019.9
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.71768570 * 640; Err = 0.64687500 * 640; time = 0.5390s; samplesPerSecond = 1187.5
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.72068405 * 640; Err = 0.66250000 * 640; time = 0.5402s; samplesPerSecond = 1184.7
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.86651764 * 640; Err = 0.71250000 * 640; time = 0.5301s; samplesPerSecond = 1207.3
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.71690063 * 640; Err = 0.64375000 * 640; time = 0.5400s; samplesPerSecond = 1185.1
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.64457779 * 640; Err = 0.62812500 * 640; time = 0.5485s; samplesPerSecond = 1166.9
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.77985382 * 640; Err = 0.67656250 * 640; time = 0.5370s; samplesPerSecond = 1191.7
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.72088394 * 640; Err = 0.65937500 * 640; time = 0.5400s; samplesPerSecond = 1185.3
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.62969666 * 640; Err = 0.64218750 * 640; time = 0.5196s; samplesPerSecond = 1231.8
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.69692688 * 640; Err = 0.64687500 * 640; time = 0.5299s; samplesPerSecond = 1207.7
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.61441345 * 640; Err = 0.59843750 * 640; time = 0.5327s; samplesPerSecond = 1201.4
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.79525757 * 640; Err = 0.68750000 * 640; time = 0.5335s; samplesPerSecond = 1199.7
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.68733673 * 640; Err = 0.62656250 * 640; time = 0.5386s; samplesPerSecond = 1188.3
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.68278198 * 640; Err = 0.63281250 * 640; time = 0.5387s; samplesPerSecond = 1188.1
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.65175781 * 640; Err = 0.64062500 * 640; time = 0.5330s; samplesPerSecond = 1200.7
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.70926514 * 640; Err = 0.62343750 * 640; time = 0.5322s; samplesPerSecond = 1202.5
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.70027771 * 640; Err = 0.64062500 * 640; time = 0.5349s; samplesPerSecond = 1196.4
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.58560791 * 640; Err = 0.60000000 * 640; time = 0.5237s; samplesPerSecond = 1222.0
MPI Rank 2:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.69992371 * 640; Err = 0.64531250 * 640; time = 0.5309s; samplesPerSecond = 1205.5
MPI Rank 2: Finished Epoch[ 2 of 10]: [Training] CE = 1.69813719 * 12500; Err = 0.64528000 * 12500; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=10.554s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.81747558 * 10000; perplexity = 6.15629773; Err = 0.66490000 * 10000
MPI Rank 2: Finished Epoch[ 2 of 10]: [Validate] CE = 1.81747558 * 10000; Err = 0.66490000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.62465394 * 64; Err = 0.65625000 * 64; time = 0.0574s; samplesPerSecond = 1115.4
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.43738597 * 576; Err = 0.56423611 * 576; time = 0.4866s; samplesPerSecond = 1183.6
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.48975248 * 640; Err = 0.56718750 * 640; time = 0.5503s; samplesPerSecond = 1163.0
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.45598488 * 640; Err = 0.55625000 * 640; time = 0.5443s; samplesPerSecond = 1175.8
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.47162743 * 640; Err = 0.52968750 * 640; time = 0.5556s; samplesPerSecond = 1152.0
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.49223747 * 640; Err = 0.55937500 * 640; time = 0.5363s; samplesPerSecond = 1193.5
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.67915115 * 640; Err = 0.60937500 * 640; time = 0.5542s; samplesPerSecond = 1154.9
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.56107254 * 640; Err = 0.56406250 * 640; time = 0.5343s; samplesPerSecond = 1197.8
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.50998230 * 640; Err = 0.55781250 * 640; time = 0.5260s; samplesPerSecond = 1216.8
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.52670898 * 640; Err = 0.55468750 * 640; time = 0.5343s; samplesPerSecond = 1197.9
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.52676392 * 640; Err = 0.57187500 * 640; time = 0.5241s; samplesPerSecond = 1221.2
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.48541107 * 640; Err = 0.57031250 * 640; time = 0.5274s; samplesPerSecond = 1213.6
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.50676422 * 640; Err = 0.55625000 * 640; time = 0.5197s; samplesPerSecond = 1231.5
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.48903351 * 640; Err = 0.54062500 * 640; time = 0.5305s; samplesPerSecond = 1206.4
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.53033447 * 640; Err = 0.57812500 * 640; time = 0.5248s; samplesPerSecond = 1219.6
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.46138306 * 640; Err = 0.54218750 * 640; time = 0.5318s; samplesPerSecond = 1203.4
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.36459045 * 640; Err = 0.48593750 * 640; time = 0.5400s; samplesPerSecond = 1185.3
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.52749176 * 640; Err = 0.55312500 * 640; time = 0.5382s; samplesPerSecond = 1189.1
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.49456177 * 640; Err = 0.53906250 * 640; time = 0.5253s; samplesPerSecond = 1218.4
MPI Rank 2:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.44113464 * 640; Err = 0.54687500 * 640; time = 0.5355s; samplesPerSecond = 1195.2
MPI Rank 2: Finished Epoch[ 3 of 10]: [Training] CE = 1.49472125 * 12500; Err = 0.55424000 * 12500; totalSamplesSeen = 37500; learningRatePerSample = 0.0040000002; epochTime=10.485s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.78903568 * 10000; perplexity = 5.98367953; Err = 0.57620000 * 10000
MPI Rank 2: Finished Epoch[ 3 of 10]: [Validate] CE = 1.78903568 * 10000; Err = 0.57620000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.44233966 * 64; Err = 0.51562500 * 64; time = 0.0549s; samplesPerSecond = 1165.7
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.37636876 * 576; Err = 0.51041667 * 576; time = 0.4806s; samplesPerSecond = 1198.5
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.29852085 * 640; Err = 0.47968750 * 640; time = 0.5397s; samplesPerSecond = 1185.8
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.27735424 * 640; Err = 0.46093750 * 640; time = 0.5698s; samplesPerSecond = 1123.2
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.23366890 * 640; Err = 0.48906250 * 640; time = 0.5412s; samplesPerSecond = 1182.6
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.17086945 * 640; Err = 0.43750000 * 640; time = 0.5378s; samplesPerSecond = 1190.0
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.22122078 * 640; Err = 0.43437500 * 640; time = 0.5267s; samplesPerSecond = 1215.2
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.28774338 * 640; Err = 0.47812500 * 640; time = 0.5343s; samplesPerSecond = 1197.7
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.37885284 * 640; Err = 0.48750000 * 640; time = 0.5433s; samplesPerSecond = 1178.0
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.37870941 * 640; Err = 0.50468750 * 640; time = 0.5312s; samplesPerSecond = 1204.8
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.28906708 * 640; Err = 0.47343750 * 640; time = 0.5259s; samplesPerSecond = 1217.0
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.31741943 * 640; Err = 0.49375000 * 640; time = 0.5305s; samplesPerSecond = 1206.3
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.30732880 * 640; Err = 0.47656250 * 640; time = 0.5305s; samplesPerSecond = 1206.5
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.40827026 * 640; Err = 0.50625000 * 640; time = 0.5300s; samplesPerSecond = 1207.5
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.21981354 * 640; Err = 0.44843750 * 640; time = 0.5326s; samplesPerSecond = 1201.7
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.18918610 * 640; Err = 0.40781250 * 640; time = 0.5208s; samplesPerSecond = 1228.8
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.20929718 * 640; Err = 0.43750000 * 640; time = 0.5440s; samplesPerSecond = 1176.5
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.16450348 * 640; Err = 0.42343750 * 640; time = 0.5311s; samplesPerSecond = 1205.0
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.18254395 * 640; Err = 0.44531250 * 640; time = 0.5342s; samplesPerSecond = 1198.0
MPI Rank 2:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.24972992 * 640; Err = 0.45625000 * 640; time = 0.5258s; samplesPerSecond = 1217.3
MPI Rank 2: Finished Epoch[ 4 of 10]: [Training] CE = 1.27125844 * 12500; Err = 0.46600000 * 12500; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=10.4661s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.56796725 * 10000; perplexity = 4.79688738; Err = 0.56260000 * 10000
MPI Rank 2: Finished Epoch[ 4 of 10]: [Validate] CE = 1.56796725 * 10000; Err = 0.56260000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.25893819 * 64; Err = 0.50000000 * 64; time = 0.0617s; samplesPerSecond = 1038.0
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.25579258 * 576; Err = 0.44791667 * 576; time = 0.4829s; samplesPerSecond = 1192.8
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.21176014 * 640; Err = 0.42812500 * 640; time = 0.5336s; samplesPerSecond = 1199.4
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.19333496 * 640; Err = 0.43281250 * 640; time = 0.5265s; samplesPerSecond = 1215.6
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.05651398 * 640; Err = 0.35312500 * 640; time = 0.5302s; samplesPerSecond = 1207.0
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.08051376 * 640; Err = 0.38750000 * 640; time = 0.5365s; samplesPerSecond = 1192.9
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.13468857 * 640; Err = 0.39375000 * 640; time = 0.5427s; samplesPerSecond = 1179.2
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.05819397 * 640; Err = 0.37812500 * 640; time = 0.5514s; samplesPerSecond = 1160.6
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.99690857 * 640; Err = 0.35625000 * 640; time = 0.5449s; samplesPerSecond = 1174.5
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.03883972 * 640; Err = 0.35156250 * 640; time = 0.5403s; samplesPerSecond = 1184.5
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.18681412 * 640; Err = 0.40781250 * 640; time = 0.5437s; samplesPerSecond = 1177.1
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.21322021 * 640; Err = 0.44687500 * 640; time = 0.5318s; samplesPerSecond = 1203.4
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.13797760 * 640; Err = 0.42343750 * 640; time = 0.5285s; samplesPerSecond = 1210.9
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.09435272 * 640; Err = 0.40000000 * 640; time = 0.5284s; samplesPerSecond = 1211.2
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.06693268 * 640; Err = 0.37500000 * 640; time = 0.5284s; samplesPerSecond = 1211.1
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.09954987 * 640; Err = 0.40937500 * 640; time = 0.5314s; samplesPerSecond = 1204.4
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.14476471 * 640; Err = 0.42812500 * 640; time = 0.5566s; samplesPerSecond = 1149.9
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.06307831 * 640; Err = 0.39062500 * 640; time = 0.5459s; samplesPerSecond = 1172.5
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.08274384 * 640; Err = 0.40468750 * 640; time = 0.5371s; samplesPerSecond = 1191.6
MPI Rank 2:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.07379913 * 640; Err = 0.37343750 * 640; time = 0.5383s; samplesPerSecond = 1188.8
MPI Rank 2: Finished Epoch[ 5 of 10]: [Training] CE = 1.11407523 * 12500; Err = 0.39984000 * 12500; totalSamplesSeen = 62500; learningRatePerSample = 0.0040000002; epochTime=10.5249s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.30672115 * 10000; perplexity = 3.69404161; Err = 0.45630000 * 10000
MPI Rank 2: Finished Epoch[ 5 of 10]: [Validate] CE = 1.30672115 * 10000; Err = 0.45630000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.25027323 * 64; Err = 0.46875000 * 64; time = 0.0537s; samplesPerSecond = 1192.7
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.00582033 * 576; Err = 0.33333333 * 576; time = 0.4770s; samplesPerSecond = 1207.6
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.01536083 * 640; Err = 0.35156250 * 640; time = 0.5439s; samplesPerSecond = 1176.8
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.07132969 * 640; Err = 0.36406250 * 640; time = 0.5301s; samplesPerSecond = 1207.3
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.04209805 * 640; Err = 0.36562500 * 640; time = 0.5424s; samplesPerSecond = 1180.0
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.99688187 * 640; Err = 0.34531250 * 640; time = 0.5496s; samplesPerSecond = 1164.5
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.00976830 * 640; Err = 0.36093750 * 640; time = 0.5401s; samplesPerSecond = 1184.9
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.97460480 * 640; Err = 0.34218750 * 640; time = 0.5357s; samplesPerSecond = 1194.7
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.92333527 * 640; Err = 0.32968750 * 640; time = 0.5474s; samplesPerSecond = 1169.2
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.91273956 * 640; Err = 0.32968750 * 640; time = 0.5504s; samplesPerSecond = 1162.8
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.94708481 * 640; Err = 0.31875000 * 640; time = 0.5403s; samplesPerSecond = 1184.6
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.87633438 * 640; Err = 0.32500000 * 640; time = 0.5439s; samplesPerSecond = 1176.7
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.05048904 * 640; Err = 0.38281250 * 640; time = 0.5384s; samplesPerSecond = 1188.7
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.00986862 * 640; Err = 0.35312500 * 640; time = 0.5365s; samplesPerSecond = 1192.8
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.00714264 * 640; Err = 0.35468750 * 640; time = 0.5338s; samplesPerSecond = 1198.9
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.97929687 * 640; Err = 0.32812500 * 640; time = 0.5307s; samplesPerSecond = 1206.0
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.99440308 * 640; Err = 0.35312500 * 640; time = 0.5189s; samplesPerSecond = 1233.5
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.00028992 * 640; Err = 0.36875000 * 640; time = 0.5247s; samplesPerSecond = 1219.8
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.96014557 * 640; Err = 0.35312500 * 640; time = 0.5253s; samplesPerSecond = 1218.2
MPI Rank 2:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.93743134 * 640; Err = 0.32343750 * 640; time = 0.5333s; samplesPerSecond = 1200.0
MPI Rank 2: Finished Epoch[ 6 of 10]: [Training] CE = 0.98510781 * 12500; Err = 0.34744000 * 12500; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=10.5038s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.41845741 * 10000; perplexity = 4.13074349; Err = 0.45570000 * 10000
MPI Rank 2: Finished Epoch[ 6 of 10]: [Validate] CE = 1.41845741 * 10000; Err = 0.45570000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.81297374 * 64; Err = 0.29687500 * 64; time = 0.0574s; samplesPerSecond = 1115.2
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.92110128 * 576; Err = 0.33854167 * 576; time = 0.4781s; samplesPerSecond = 1204.7
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.97786398 * 640; Err = 0.35937500 * 640; time = 0.5244s; samplesPerSecond = 1220.4
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.94386616 * 640; Err = 0.33281250 * 640; time = 0.5374s; samplesPerSecond = 1191.0
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.85525398 * 640; Err = 0.31718750 * 640; time = 0.5285s; samplesPerSecond = 1210.9
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.92777443 * 640; Err = 0.34843750 * 640; time = 0.5286s; samplesPerSecond = 1210.7
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.85345116 * 640; Err = 0.31562500 * 640; time = 0.5487s; samplesPerSecond = 1166.4
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.74539642 * 640; Err = 0.26250000 * 640; time = 0.5290s; samplesPerSecond = 1209.8
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.88162231 * 640; Err = 0.30312500 * 640; time = 0.5330s; samplesPerSecond = 1200.8
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.85761566 * 640; Err = 0.28750000 * 640; time = 0.5416s; samplesPerSecond = 1181.7
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.79443665 * 640; Err = 0.26718750 * 640; time = 0.5331s; samplesPerSecond = 1200.6
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.81942062 * 640; Err = 0.28750000 * 640; time = 0.5523s; samplesPerSecond = 1158.9
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.88389816 * 640; Err = 0.30937500 * 640; time = 0.5462s; samplesPerSecond = 1171.7
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.80506592 * 640; Err = 0.29062500 * 640; time = 0.5378s; samplesPerSecond = 1190.0
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.90532303 * 640; Err = 0.29843750 * 640; time = 0.5241s; samplesPerSecond = 1221.2
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.92802658 * 640; Err = 0.33906250 * 640; time = 0.5249s; samplesPerSecond = 1219.2
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.88562927 * 640; Err = 0.31250000 * 640; time = 0.5242s; samplesPerSecond = 1220.9
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.83622437 * 640; Err = 0.31093750 * 640; time = 0.5247s; samplesPerSecond = 1219.8
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.89631500 * 640; Err = 0.32500000 * 640; time = 0.5307s; samplesPerSecond = 1206.0
MPI Rank 2:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.85318604 * 640; Err = 0.30156250 * 640; time = 0.5371s; samplesPerSecond = 1191.5
MPI Rank 2: Finished Epoch[ 7 of 10]: [Training] CE = 0.87447977 * 12500; Err = 0.31168000 * 12500; totalSamplesSeen = 87500; learningRatePerSample = 0.0040000002; epochTime=10.4474s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.00187744 * 10000; perplexity = 2.72339003; Err = 0.33770000 * 10000
MPI Rank 2: Finished Epoch[ 7 of 10]: [Validate] CE = 1.00187744 * 10000; Err = 0.33770000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.78631270 * 64; Err = 0.25000000 * 64; time = 0.0536s; samplesPerSecond = 1193.3
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.79669024 * 576; Err = 0.28819444 * 576; time = 0.4773s; samplesPerSecond = 1206.9
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.85207663 * 640; Err = 0.30156250 * 640; time = 0.5342s; samplesPerSecond = 1198.0
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.92949467 * 640; Err = 0.31562500 * 640; time = 0.5342s; samplesPerSecond = 1198.1
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.79962749 * 640; Err = 0.26875000 * 640; time = 0.5420s; samplesPerSecond = 1180.8
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.79732208 * 640; Err = 0.27031250 * 640; time = 0.5314s; samplesPerSecond = 1204.3
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.78084831 * 640; Err = 0.26250000 * 640; time = 0.5340s; samplesPerSecond = 1198.5
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.74613762 * 640; Err = 0.25000000 * 640; time = 0.5373s; samplesPerSecond = 1191.1
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.77533989 * 640; Err = 0.28437500 * 640; time = 0.5311s; samplesPerSecond = 1205.1
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.71429977 * 640; Err = 0.24687500 * 640; time = 0.5185s; samplesPerSecond = 1234.4
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.75824051 * 640; Err = 0.27187500 * 640; time = 0.5294s; samplesPerSecond = 1208.9
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.82963791 * 640; Err = 0.31875000 * 640; time = 0.5264s; samplesPerSecond = 1215.9
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.70678406 * 640; Err = 0.24062500 * 640; time = 0.5337s; samplesPerSecond = 1199.2
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.72881699 * 640; Err = 0.24687500 * 640; time = 0.5358s; samplesPerSecond = 1194.5
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.74989243 * 640; Err = 0.27968750 * 640; time = 0.5276s; samplesPerSecond = 1213.0
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.73113632 * 640; Err = 0.26718750 * 640; time = 0.5478s; samplesPerSecond = 1168.3
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.77118530 * 640; Err = 0.26718750 * 640; time = 0.5532s; samplesPerSecond = 1156.9
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.78114853 * 640; Err = 0.28593750 * 640; time = 0.5256s; samplesPerSecond = 1217.6
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.81733704 * 640; Err = 0.28437500 * 640; time = 0.5294s; samplesPerSecond = 1208.9
MPI Rank 2:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.79669647 * 640; Err = 0.27031250 * 640; time = 0.5395s; samplesPerSecond = 1186.2
MPI Rank 2: Finished Epoch[ 8 of 10]: [Training] CE = 0.78551719 * 12500; Err = 0.27568000 * 12500; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=10.4608s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.22601352 * 10000; perplexity = 3.40761801; Err = 0.38160000 * 10000
MPI Rank 2: Finished Epoch[ 8 of 10]: [Validate] CE = 1.22601352 * 10000; Err = 0.38160000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.83595055 * 64; Err = 0.28125000 * 64; time = 0.0579s; samplesPerSecond = 1105.3
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.72617730 * 576; Err = 0.25868056 * 576; time = 0.4800s; samplesPerSecond = 1199.9
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.70044494 * 640; Err = 0.24531250 * 640; time = 0.5421s; samplesPerSecond = 1180.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.81411018 * 640; Err = 0.28281250 * 640; time = 0.5229s; samplesPerSecond = 1223.9
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.81190205 * 640; Err = 0.29375000 * 640; time = 0.5398s; samplesPerSecond = 1185.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.77275333 * 640; Err = 0.27812500 * 640; time = 0.5218s; samplesPerSecond = 1226.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.76313438 * 640; Err = 0.27656250 * 640; time = 0.5353s; samplesPerSecond = 1195.5
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.82675133 * 640; Err = 0.28125000 * 640; time = 0.5192s; samplesPerSecond = 1232.8
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.72924843 * 640; Err = 0.25468750 * 640; time = 0.5393s; samplesPerSecond = 1186.7
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.69464188 * 640; Err = 0.23593750 * 640; time = 0.5497s; samplesPerSecond = 1164.2
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.72829590 * 640; Err = 0.24531250 * 640; time = 0.5476s; samplesPerSecond = 1168.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.69277649 * 640; Err = 0.25625000 * 640; time = 0.5381s; samplesPerSecond = 1189.3
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.82077408 * 640; Err = 0.30625000 * 640; time = 0.5340s; samplesPerSecond = 1198.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.65634155 * 640; Err = 0.23281250 * 640; time = 0.5393s; samplesPerSecond = 1186.7
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.70773392 * 640; Err = 0.24375000 * 640; time = 0.5267s; samplesPerSecond = 1215.1
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.70985184 * 640; Err = 0.25000000 * 640; time = 0.5330s; samplesPerSecond = 1200.8
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.69426270 * 640; Err = 0.24062500 * 640; time = 0.5334s; samplesPerSecond = 1199.8
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.65885544 * 640; Err = 0.22968750 * 640; time = 0.5317s; samplesPerSecond = 1203.6
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.71751633 * 640; Err = 0.26250000 * 640; time = 0.5327s; samplesPerSecond = 1201.5
MPI Rank 2:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.70314941 * 640; Err = 0.23750000 * 640; time = 0.5376s; samplesPerSecond = 1190.4
MPI Rank 2: Finished Epoch[ 9 of 10]: [Training] CE = 0.73556047 * 12500; Err = 0.25880000 * 12500; totalSamplesSeen = 112500; learningRatePerSample = 0.0040000002; epochTime=10.4636s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 0.83226814 * 10000; perplexity = 2.29852621; Err = 0.27890000 * 10000
MPI Rank 2: Finished Epoch[ 9 of 10]: [Validate] CE = 0.83226814 * 10000; Err = 0.27890000 * 10000
MPI Rank 2: 
MPI Rank 2: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 2: 
MPI Rank 2: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 2:  Epoch[10 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.49255344 * 64; Err = 0.15625000 * 64; time = 0.0579s; samplesPerSecond = 1106.3
MPI Rank 2:  Epoch[10 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.63906434 * 576; Err = 0.23611111 * 576; time = 0.4900s; samplesPerSecond = 1175.6
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.64903970 * 640; Err = 0.22343750 * 640; time = 0.5282s; samplesPerSecond = 1211.6
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.61716042 * 640; Err = 0.21718750 * 640; time = 0.5360s; samplesPerSecond = 1194.0
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.71674900 * 640; Err = 0.23906250 * 640; time = 0.5417s; samplesPerSecond = 1181.5
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.68619766 * 640; Err = 0.24218750 * 640; time = 0.5295s; samplesPerSecond = 1208.7
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.68919296 * 640; Err = 0.25468750 * 640; time = 0.5369s; samplesPerSecond = 1192.0
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.63848915 * 640; Err = 0.22031250 * 640; time = 0.5268s; samplesPerSecond = 1214.8
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.70572662 * 640; Err = 0.24843750 * 640; time = 0.5336s; samplesPerSecond = 1199.4
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.69705124 * 640; Err = 0.25000000 * 640; time = 0.5293s; samplesPerSecond = 1209.1
MPI Rank 2:  Epoch[10 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.65324669 * 640; Err = 0.22031250 * 640; time = 0.5248s; samplesPerSecond = 1219.4
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.62050934 * 640; Err = 0.20781250 * 640; time = 0.5353s; samplesPerSecond = 1195.5
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.68788681 * 640; Err = 0.23125000 * 640; time = 0.5352s; samplesPerSecond = 1195.7
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.69818497 * 640; Err = 0.24218750 * 640; time = 0.5563s; samplesPerSecond = 1150.5
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.69138412 * 640; Err = 0.23281250 * 640; time = 0.5425s; samplesPerSecond = 1179.7
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.63428421 * 640; Err = 0.22031250 * 640; time = 0.5383s; samplesPerSecond = 1188.9
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.59098282 * 640; Err = 0.21250000 * 640; time = 0.5465s; samplesPerSecond = 1171.2
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.68365479 * 640; Err = 0.23906250 * 640; time = 0.5431s; samplesPerSecond = 1178.5
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.66321335 * 640; Err = 0.22500000 * 640; time = 0.5362s; samplesPerSecond = 1193.6
MPI Rank 2:  Epoch[10 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.65275803 * 640; Err = 0.24062500 * 640; time = 0.5395s; samplesPerSecond = 1186.2
MPI Rank 2: Finished Epoch[10 of 10]: [Training] CE = 0.66347148 * 12500; Err = 0.23160000 * 12500; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=10.5186s
MPI Rank 2: Final Results: Minibatch[1-40]: CE = 1.29690264 * 10000; perplexity = 3.65794912; Err = 0.38620000 * 10000
MPI Rank 2: Finished Epoch[10 of 10]: [Validate] CE = 1.29690264 * 10000; Err = 0.38620000 * 10000
MPI Rank 2: ~MultiversoHelper
MPI Rank 2: 
MPI Rank 2: Action "train" complete.
MPI Rank 2: 
MPI Rank 2: COMPLETED.
MPI Rank 2: ~MPIWrapper
MPI Rank 3: Configuration After Processing and Variable Resolution:
MPI Rank 3: 
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:asyncBuffer=false
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:command=Train
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:ConfigDir=.
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:configName=cifar-4gpu-take1
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:DataDir=.
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:deviceId=auto
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:epochSize=10
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:imageLayout=cudnn
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:initOnCPUOnly=true
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:makeMode=true
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:minibatch=256
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:minibatchSize=128
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:ModelDir=./Output-cifar-4gpu-take1/Models
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:ndlMacros=./Macros.ndl
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:OutputDir=./Output-cifar-4gpu-take1
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:parallelizationMethod=DataParallelASGD
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:parallelTrain=true
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:precision=float
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:prefetch=true
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:Proj16to32Filename=./16to32.txt
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:Proj32to64Filename=./32to64.txt
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:RootDir=.
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:stderr=./Output-cifar-4gpu-take1/03_ResNet
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:Test=[
MPI Rank 3:     action = "test"
MPI Rank 3:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 3:     minibatchSize = 256
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "ImageReader"
MPI Rank 3:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         features = [
MPI Rank 3:             width = 32
MPI Rank 3:             height = 32
MPI Rank 3:             channels = 3
MPI Rank 3:             cropType = "center"
MPI Rank 3:             cropRatio = 1
MPI Rank 3:             jitterType = "uniRatio"
MPI Rank 3:             interpolations = "linear"
MPI Rank 3:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3:             labelDim = 10
MPI Rank 3:         ]
MPI Rank 3:     ]    
MPI Rank 3: ]
MPI Rank 3: 
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:traceLevel=1
MPI Rank 3: configparameters: 03_ResNet-parallel.cntk:Train=[
MPI Rank 3:     action = "train"
MPI Rank 3:     modelPath = "./Output-cifar-4gpu-take1/Models/03_ResNet"
MPI Rank 3:      NDLNetworkBuilder = [
MPI Rank 3:         networkDescription = "./03_ResNet.ndl"
MPI Rank 3:     ]
MPI Rank 3:     SGD = [
MPI Rank 3:         epochSize = 0
MPI Rank 3:         minibatchSize = 256
MPI Rank 3:         learningRatesPerSample = 0.004*80:0.0004*40:0.00004
MPI Rank 3:         momentumPerMB = 0
MPI Rank 3:         maxEpochs = 10
MPI Rank 3:         L2RegWeight = 0.0001
MPI Rank 3:         dropoutRate = 0
MPI Rank 3:         perfTraceLevel = 1
MPI Rank 3:         firstMBsToShowResult = 1
MPI Rank 3:         numMBsToShowResult = 10
MPI Rank 3:         ParallelTrain = [
MPI Rank 3:             parallelizationMethod = DataParallelASGD
MPI Rank 3:             distributedMBReading = "true"
MPI Rank 3:             parallelizationStartEpoch = 1
MPI Rank 3:             DataParallelSGD = [
MPI Rank 3:                 gradientBits = 1
MPI Rank 3:                 useBufferedAsyncGradientAggregation = false
MPI Rank 3:             ]
MPI Rank 3:             ModelAveragingSGD = [
MPI Rank 3:                 blockSizePerWorker = 128
MPI Rank 3:             ]
MPI Rank 3:             DataParallelASGD = [
MPI Rank 3:                 syncPeriod = 128
MPI Rank 3:                 usePipeline = false
MPI Rank 3:             ]
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     reader = [
MPI Rank 3:         readerType = "ImageReader"
MPI Rank 3:         file = "./cifar-10-batches-py/train_map.txt"
MPI Rank 3:         randomize = "auto"
MPI Rank 3:         features = [
MPI Rank 3:             width = 32
MPI Rank 3:             height = 32
MPI Rank 3:             channels = 3
MPI Rank 3:             cropType = "random"
MPI Rank 3:             cropRatio = 0.8
MPI Rank 3:             jitterType = "uniRatio"
MPI Rank 3:             interpolations = "linear"
MPI Rank 3:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3:             labelDim = 10
MPI Rank 3:         ]
MPI Rank 3:     ]
MPI Rank 3:     cvReader = [
MPI Rank 3:         readerType = "ImageReader"
MPI Rank 3:         file = "./cifar-10-batches-py/test_map.txt"
MPI Rank 3:         randomize = "none"
MPI Rank 3:         features = [
MPI Rank 3:             width = 32
MPI Rank 3:             height = 32
MPI Rank 3:             channels = 3
MPI Rank 3:             cropType = "center"
MPI Rank 3:             cropRatio = 1
MPI Rank 3:             jitterType = "uniRatio"
MPI Rank 3:             interpolations = "linear"
MPI Rank 3:             meanFile = "./cifar-10-batches-py/CIFAR-10_mean.xml"
MPI Rank 3:         ]
MPI Rank 3:         labels = [
MPI Rank 3:             labelDim = 10
MPI Rank 3:         ]
MPI Rank 3:     ]    
MPI Rank 3: ]
MPI Rank 3: 
MPI Rank 3: Commands: Train
MPI Rank 3: precision = "float"
MPI Rank 3: 
MPI Rank 3: ##############################################################################
MPI Rank 3: #                                                                            #
MPI Rank 3: # Train command (train action)                                               #
MPI Rank 3: #                                                                            #
MPI Rank 3: ##############################################################################
MPI Rank 3: 
MPI Rank 3: LockDevice: Failed to lock GPU 1 for exclusive use.
MPI Rank 3: LockDevice: Failed to lock GPU 7 for exclusive use.
MPI Rank 3: LockDevice: Failed to lock GPU 0 for exclusive use.
MPI Rank 3: 
MPI Rank 3: Creating virgin network.
MPI Rank 3: NDLBuilder Using GPU 2
MPI Rank 3: SetGaussianRandomValue (GPU): creating curand object with seed 1, sizeof(ElemType)==4
MPI Rank 3: 
MPI Rank 3: OutputNodes.t Times operation: For legacy compatibility, the sample layout of left input (OutputNodes.W LearnableParameter operation) was patched to [10 x 1 x 1 x 64] (from [10 x 64])
MPI Rank 3: conv1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 3, Output: 32 x 32 x 16, Kernel: 3 x 3 x 3, Map: 1 x 1 x 16, Stride: 1 x 1 x 3, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn1_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 32 x 32 x 16, Kernel: 3 x 3 x 16, Map: 1 x 1 x 16, Stride: 1 x 1 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 3 x 3 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 32 x 32 x 16, Output: 16 x 16 x 32, Kernel: 1 x 1 x 16, Map: 1 x 1 x 32, Stride: 2 x 2 x 16, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn2_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 16 x 16 x 32, Kernel: 3 x 3 x 32, Map: 1 x 1 x 32, Stride: 1 x 1 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_1.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 3 x 3 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_1.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_1.c_proj.c: using cuDNN convolution engine for geometry: Input: 16 x 16 x 32, Output: 8 x 8 x 64, Kernel: 1 x 1 x 32, Map: 1 x 1 x 64, Stride: 2 x 2 x 32, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_2.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_2.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_3.c1.c.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: rn3_3.c2.c.c: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 8 x 8 x 64, Kernel: 3 x 3 x 64, Map: 1 x 1 x 64, Stride: 1 x 1 x 64, Sharing: (1), AutoPad: (1), LowerPad: 0, UpperPad: 0.
MPI Rank 3: Using CNTK batch normalization engine.
MPI Rank 3: pool: using cuDNN convolution engine for geometry: Input: 8 x 8 x 64, Output: 1 x 1 x 64, Kernel: 8 x 8 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1), AutoPad: (0), LowerPad: 0, UpperPad: 0.
MPI Rank 3: 
MPI Rank 3: Model has 184 nodes. Using GPU 2.
MPI Rank 3: 
MPI Rank 3: Training criterion:   CE = CrossEntropyWithSoftmax
MPI Rank 3: Evaluation criterion: Err = ClassificationError
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Allocating matrices for forward and/or backward propagation.
MPI Rank 3: 
MPI Rank 3: Memory Sharing: Out of 321 matrices, 160 are shared as 62, and 161 are not shared.
MPI Rank 3: 
MPI Rank 3:     { conv1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       conv1.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { conv1.c.W : [16 x 27] (gradient)
MPI Rank 3:       rn1_1.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_1.c1.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { conv1.c.c.b : [16 x 1] (gradient)
MPI Rank 3:       rn1_1.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_1.c1.c.W : [16 x 144] (gradient)
MPI Rank 3:       rn1_1.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_1.p : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_1.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_1.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_1.c2.W : [16 x 144] (gradient)
MPI Rank 3:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_1.c2.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_1.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 3:     { conv1.c.c.sc : [16 x 1] (gradient)
MPI Rank 3:       conv1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_2.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_2.c1.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_1.c2.c.b : [16 x 1] (gradient)
MPI Rank 3:       rn1_2.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_2.c1.c.W : [16 x 144] (gradient)
MPI Rank 3:       rn1_2.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_2.p : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_2.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_2.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_2.c2.W : [16 x 144] (gradient)
MPI Rank 3:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_2.c2.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_2.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 3:     { rn1_1.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_1.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_3.c1.c.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_3.c1.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_2.c2.c.b : [16 x 1] (gradient)
MPI Rank 3:       rn1_3.c2.c.c : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_3.c1.c.W : [16 x 144] (gradient)
MPI Rank 3:       rn1_3.c2.c.c : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_3.p : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_3.c2.c.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_3.y : [32 x 32 x 16 x *] }
MPI Rank 3:     { rn1_3.c2.W : [16 x 144] (gradient)
MPI Rank 3:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn1_3.c2.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_3.p : [32 x 32 x 16 x *] (gradient) }
MPI Rank 3:     { rn1_2.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_2.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_2.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn2_1.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_1.c1.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn1_3.c2.c.b : [16 x 1] (gradient)
MPI Rank 3:       rn2_1.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_1.c2.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_1.c_proj.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_1.c1.c.W : [32 x 144] (gradient)
MPI Rank 3:       rn2_1.c2.c.c : [16 x 16 x 32 x *] (gradient) }
MPI Rank 3:     { rn2_1.c2.c.b : [32 x 1] (gradient)
MPI Rank 3:       rn2_1.c_proj.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_1.p : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_1.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_1.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_1.c2.W : [32 x 288] (gradient)
MPI Rank 3:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_1.c_proj.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_1.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 3:     { rn1_3.c1.c.c.sc : [16 x 1] (gradient)
MPI Rank 3:       rn1_3.c1.y : [32 x 32 x 16 x *] (gradient)
MPI Rank 3:       rn1_3.y : [32 x 32 x 16 x *] (gradient) }
MPI Rank 3:     { rn2_1.c_proj.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_2.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_2.c1.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_2.c1.c.W : [32 x 288] (gradient)
MPI Rank 3:       rn2_2.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_2.p : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_2.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_2.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_2.c2.W : [32 x 288] (gradient)
MPI Rank 3:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_2.c2.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_2.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 3:     { rn2_1.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_1.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_3.c1.c.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_3.c1.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_2.c2.c.b : [32 x 1] (gradient)
MPI Rank 3:       rn2_3.c2.c.c : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_3.c1.c.W : [32 x 288] (gradient)
MPI Rank 3:       rn2_3.c2.c.c : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_3.p : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_3.c2.c.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_3.y : [16 x 16 x 32 x *] }
MPI Rank 3:     { rn2_3.c2.W : [32 x 288] (gradient)
MPI Rank 3:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn2_3.c2.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_3.p : [16 x 16 x 32 x *] (gradient) }
MPI Rank 3:     { rn2_2.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_2.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_2.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn3_1.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_1.c1.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn2_3.c2.c.b : [32 x 1] (gradient)
MPI Rank 3:       rn3_1.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_1.c2.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_1.c_proj.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_1.c1.c.W : [64 x 288] (gradient)
MPI Rank 3:       rn3_1.c2.c.c : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { rn3_1.c2.c.b : [64 x 1] (gradient)
MPI Rank 3:       rn3_1.c_proj.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_1.p : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_1.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_1.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_1.c2.W : [64 x 576] (gradient)
MPI Rank 3:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_1.c_proj.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_1.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { rn2_3.c1.c.c.sc : [32 x 1] (gradient)
MPI Rank 3:       rn2_3.c1.y : [16 x 16 x 32 x *] (gradient)
MPI Rank 3:       rn2_3.y : [16 x 16 x 32 x *] (gradient) }
MPI Rank 3:     { rn3_1.c_proj.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_2.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_2.c1.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_2.c1.c.W : [64 x 576] (gradient)
MPI Rank 3:       rn3_2.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_2.p : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_2.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_2.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_2.c2.W : [64 x 576] (gradient)
MPI Rank 3:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_2.c2.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_2.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { rn3_1.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_1.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.c1.c.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.c1.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_2.c2.c.b : [64 x 1] (gradient)
MPI Rank 3:       rn3_3.c2.c.c : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_3.c1.c.W : [64 x 576] (gradient)
MPI Rank 3:       rn3_3.c2.c.c : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.p : [8 x 8 x 64 x *] }
MPI Rank 3:     { rn3_3.c2.c.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.y : [8 x 8 x 64 x *] }
MPI Rank 3:     { pool : [1 x 1 x 64 x *]
MPI Rank 3:       rn3_3.c2.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_3.p : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { OutputNodes.t : [10 x *]
MPI Rank 3:       rn3_3.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_3.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { OutputNodes.W : [10 x 1 x 1 x 64] (gradient)
MPI Rank 3:       OutputNodes.z : [10 x *] (gradient) }
MPI Rank 3:     { OutputNodes.t : [10 x *] (gradient)
MPI Rank 3:       rn3_2.c1.c.c.sc : [64 x 1] (gradient)
MPI Rank 3:       rn3_2.c1.y : [8 x 8 x 64 x *] (gradient)
MPI Rank 3:       rn3_2.y : [8 x 8 x 64 x *] (gradient) }
MPI Rank 3:     { pool : [1 x 1 x 64 x *] (gradient)
MPI Rank 3:       rn3_3.c2.W : [64 x 576] (gradient) }
MPI Rank 3: 
MPI Rank 3: 
MPI Rank 3: Training 269914 parameters in 63 out of 63 parameter tensors and 137 nodes with gradient:
MPI Rank 3: 
MPI Rank 3:     Node 'OutputNodes.W' (LearnableParameter operation) : [10 x 1 x 1 x 64]
MPI Rank 3:     Node 'OutputNodes.b' (LearnableParameter operation) : [10]
MPI Rank 3:     Node 'conv1.c.W' (LearnableParameter operation) : [16 x 27]
MPI Rank 3:     Node 'conv1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'conv1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_1.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_1.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_1.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_1.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_1.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_1.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_2.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_2.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_2.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_2.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_2.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_2.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_3.c1.c.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_3.c1.c.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_3.c1.c.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_3.c2.W' (LearnableParameter operation) : [16 x 144]
MPI Rank 3:     Node 'rn1_3.c2.c.b' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn1_3.c2.c.sc' (LearnableParameter operation) : [16 x 1]
MPI Rank 3:     Node 'rn2_1.c1.c.W' (LearnableParameter operation) : [32 x 144]
MPI Rank 3:     Node 'rn2_1.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_1.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_1.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 3:     Node 'rn2_1.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_1.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_1.c_proj.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_1.c_proj.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_2.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 3:     Node 'rn2_2.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_2.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_2.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 3:     Node 'rn2_2.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_2.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_3.c1.c.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 3:     Node 'rn2_3.c1.c.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_3.c1.c.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_3.c2.W' (LearnableParameter operation) : [32 x 288]
MPI Rank 3:     Node 'rn2_3.c2.c.b' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn2_3.c2.c.sc' (LearnableParameter operation) : [32 x 1]
MPI Rank 3:     Node 'rn3_1.c1.c.W' (LearnableParameter operation) : [64 x 288]
MPI Rank 3:     Node 'rn3_1.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_1.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_1.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 3:     Node 'rn3_1.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_1.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_1.c_proj.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_1.c_proj.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_2.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 3:     Node 'rn3_2.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_2.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_2.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 3:     Node 'rn3_2.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_2.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_3.c1.c.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 3:     Node 'rn3_3.c1.c.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_3.c1.c.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_3.c2.W' (LearnableParameter operation) : [64 x 576]
MPI Rank 3:     Node 'rn3_3.c2.c.b' (LearnableParameter operation) : [64 x 1]
MPI Rank 3:     Node 'rn3_3.c2.c.sc' (LearnableParameter operation) : [64 x 1]
MPI Rank 3: 
MPI Rank 3: No PreCompute nodes found, or all already computed. Skipping pre-computation step.
MPI Rank 3: 
MPI Rank 3: Starting Epoch 1: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[   1-   1]: CE = 2.29568386 * 64; Err = 0.90625000 * 64; time = 3.8343s; samplesPerSecond = 16.7
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[   2-  10]: CE = 3.00203631 * 576; Err = 0.88368056 * 576; time = 0.8829s; samplesPerSecond = 652.4
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  11-  20]: CE = 2.30930862 * 640; Err = 0.88593750 * 640; time = 0.6653s; samplesPerSecond = 962.0
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  21-  30]: CE = 2.28276138 * 640; Err = 0.87968750 * 640; time = 0.6755s; samplesPerSecond = 947.5
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  31-  40]: CE = 2.28134995 * 640; Err = 0.86875000 * 640; time = 0.5788s; samplesPerSecond = 1105.7
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  41-  50]: CE = 2.23751755 * 640; Err = 0.82343750 * 640; time = 0.5766s; samplesPerSecond = 1110.0
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  51-  60]: CE = 2.20450134 * 640; Err = 0.81250000 * 640; time = 0.6010s; samplesPerSecond = 1064.9
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  61-  70]: CE = 2.15398712 * 640; Err = 0.81718750 * 640; time = 0.5652s; samplesPerSecond = 1132.3
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  71-  80]: CE = 2.08659515 * 640; Err = 0.80000000 * 640; time = 0.5760s; samplesPerSecond = 1111.1
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  81-  90]: CE = 2.07948914 * 640; Err = 0.80468750 * 640; time = 0.5775s; samplesPerSecond = 1108.2
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[  91- 100]: CE = 1.98168030 * 640; Err = 0.76875000 * 640; time = 0.5706s; samplesPerSecond = 1121.7
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 101- 110]: CE = 2.04701843 * 640; Err = 0.78125000 * 640; time = 0.5762s; samplesPerSecond = 1110.7
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 111- 120]: CE = 2.01480865 * 640; Err = 0.77031250 * 640; time = 0.5800s; samplesPerSecond = 1103.4
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 121- 130]: CE = 1.87921753 * 640; Err = 0.71250000 * 640; time = 0.5686s; samplesPerSecond = 1125.6
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 131- 140]: CE = 1.93577271 * 640; Err = 0.75312500 * 640; time = 0.5896s; samplesPerSecond = 1085.5
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 141- 150]: CE = 1.87757263 * 640; Err = 0.72500000 * 640; time = 0.5903s; samplesPerSecond = 1084.2
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 151- 160]: CE = 1.85605164 * 640; Err = 0.72343750 * 640; time = 0.5831s; samplesPerSecond = 1097.6
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 161- 170]: CE = 1.84783020 * 640; Err = 0.72656250 * 640; time = 0.5684s; samplesPerSecond = 1126.0
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 171- 180]: CE = 1.78931274 * 640; Err = 0.69687500 * 640; time = 0.5709s; samplesPerSecond = 1121.0
MPI Rank 3:  Epoch[ 1 of 10]-Minibatch[ 181- 190]: CE = 1.68885498 * 640; Err = 0.66406250 * 640; time = 0.5588s; samplesPerSecond = 1145.2
MPI Rank 3: Finished Epoch[ 1 of 10]: [Training] CE = 2.06783250 * 12500; Err = 0.78056000 * 12500; totalSamplesSeen = 12500; learningRatePerSample = 0.0040000002; epochTime=15.6332s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 2.35512223 * 10000; perplexity = 10.53941699; Err = 0.78090000 * 10000
MPI Rank 3: Finished Epoch[ 1 of 10]: [Validate] CE = 2.35512223 * 10000; Err = 0.78090000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 2: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.65953863 * 64; Err = 0.73437500 * 64; time = 0.0629s; samplesPerSecond = 1017.1
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.78623323 * 576; Err = 0.67534722 * 576; time = 0.5145s; samplesPerSecond = 1119.6
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.81614990 * 640; Err = 0.70781250 * 640; time = 0.6013s; samplesPerSecond = 1064.3
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.76442986 * 640; Err = 0.65781250 * 640; time = 0.5997s; samplesPerSecond = 1067.2
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.68020325 * 640; Err = 0.65000000 * 640; time = 0.5841s; samplesPerSecond = 1095.8
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.76262131 * 640; Err = 0.65312500 * 640; time = 0.5975s; samplesPerSecond = 1071.1
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.77599182 * 640; Err = 0.68906250 * 640; time = 0.5770s; samplesPerSecond = 1109.1
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.68750305 * 640; Err = 0.67031250 * 640; time = 0.5863s; samplesPerSecond = 1091.6
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.64404449 * 640; Err = 0.63125000 * 640; time = 0.6011s; samplesPerSecond = 1064.7
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.69336090 * 640; Err = 0.67187500 * 640; time = 0.5791s; samplesPerSecond = 1105.2
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.65988770 * 640; Err = 0.61250000 * 640; time = 0.5841s; samplesPerSecond = 1095.7
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.71341553 * 640; Err = 0.64062500 * 640; time = 0.5878s; samplesPerSecond = 1088.8
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.64598999 * 640; Err = 0.61250000 * 640; time = 0.5908s; samplesPerSecond = 1083.2
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.67620087 * 640; Err = 0.63281250 * 640; time = 0.5880s; samplesPerSecond = 1088.4
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.64363708 * 640; Err = 0.63281250 * 640; time = 0.5852s; samplesPerSecond = 1093.7
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.65608215 * 640; Err = 0.59843750 * 640; time = 0.5873s; samplesPerSecond = 1089.7
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.64324646 * 640; Err = 0.61875000 * 640; time = 0.5856s; samplesPerSecond = 1092.9
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.61067200 * 640; Err = 0.62656250 * 640; time = 0.5893s; samplesPerSecond = 1086.1
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.53760986 * 640; Err = 0.56562500 * 640; time = 0.5945s; samplesPerSecond = 1076.5
MPI Rank 3:  Epoch[ 2 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.53103027 * 640; Err = 0.56093750 * 640; time = 0.5696s; samplesPerSecond = 1123.6
MPI Rank 3: Finished Epoch[ 2 of 10]: [Training] CE = 1.67368937 * 12500; Err = 0.63656000 * 12500; totalSamplesSeen = 25000; learningRatePerSample = 0.0040000002; epochTime=11.5157s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.64382220 * 10000; perplexity = 5.17491132; Err = 0.59250000 * 10000
MPI Rank 3: Finished Epoch[ 2 of 10]: [Validate] CE = 1.64382220 * 10000; Err = 0.59250000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 3: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.50564575 * 64; Err = 0.51562500 * 64; time = 0.0666s; samplesPerSecond = 961.1
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.60697852 * 576; Err = 0.59722222 * 576; time = 0.5413s; samplesPerSecond = 1064.2
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.59783306 * 640; Err = 0.61093750 * 640; time = 0.5944s; samplesPerSecond = 1076.7
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.58750134 * 640; Err = 0.56718750 * 640; time = 0.5893s; samplesPerSecond = 1086.1
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.48937531 * 640; Err = 0.55312500 * 640; time = 0.5975s; samplesPerSecond = 1071.2
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.54565392 * 640; Err = 0.57500000 * 640; time = 0.5814s; samplesPerSecond = 1100.7
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.51745148 * 640; Err = 0.56250000 * 640; time = 0.5781s; samplesPerSecond = 1107.1
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.49062805 * 640; Err = 0.57031250 * 640; time = 0.5722s; samplesPerSecond = 1118.6
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.51426773 * 640; Err = 0.55625000 * 640; time = 0.5884s; samplesPerSecond = 1087.7
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.53536301 * 640; Err = 0.57187500 * 640; time = 0.5830s; samplesPerSecond = 1097.8
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.42502289 * 640; Err = 0.51093750 * 640; time = 0.5787s; samplesPerSecond = 1105.8
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.41793518 * 640; Err = 0.52500000 * 640; time = 0.5981s; samplesPerSecond = 1070.0
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.39775085 * 640; Err = 0.51875000 * 640; time = 0.5791s; samplesPerSecond = 1105.2
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.44073029 * 640; Err = 0.52500000 * 640; time = 0.5991s; samplesPerSecond = 1068.3
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.36063232 * 640; Err = 0.51250000 * 640; time = 0.5789s; samplesPerSecond = 1105.5
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.33801727 * 640; Err = 0.49375000 * 640; time = 0.5841s; samplesPerSecond = 1095.8
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.35516815 * 640; Err = 0.48125000 * 640; time = 0.5849s; samplesPerSecond = 1094.2
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.41439209 * 640; Err = 0.50468750 * 640; time = 0.5872s; samplesPerSecond = 1089.8
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.34097443 * 640; Err = 0.51250000 * 640; time = 0.5970s; samplesPerSecond = 1072.1
MPI Rank 3:  Epoch[ 3 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.31370239 * 640; Err = 0.47656250 * 640; time = 0.5966s; samplesPerSecond = 1072.8
MPI Rank 3: Finished Epoch[ 3 of 10]: [Training] CE = 1.45216734 * 12500; Err = 0.53560000 * 12500; totalSamplesSeen = 37500; learningRatePerSample = 0.0040000002; epochTime=11.5176s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.32536545 * 10000; perplexity = 3.76356050; Err = 0.48650000 * 10000
MPI Rank 3: Finished Epoch[ 3 of 10]: [Validate] CE = 1.32536545 * 10000; Err = 0.48650000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 4: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.55245924 * 64; Err = 0.51562500 * 64; time = 0.0659s; samplesPerSecond = 971.8
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.34859535 * 576; Err = 0.48784722 * 576; time = 0.5152s; samplesPerSecond = 1118.0
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.32112160 * 640; Err = 0.48281250 * 640; time = 0.6000s; samplesPerSecond = 1066.7
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.29549160 * 640; Err = 0.49218750 * 640; time = 0.5974s; samplesPerSecond = 1071.3
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.35967522 * 640; Err = 0.49375000 * 640; time = 0.5724s; samplesPerSecond = 1118.1
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.35553932 * 640; Err = 0.47343750 * 640; time = 0.5845s; samplesPerSecond = 1095.0
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.33504639 * 640; Err = 0.47968750 * 640; time = 0.5957s; samplesPerSecond = 1074.4
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.29115067 * 640; Err = 0.49531250 * 640; time = 0.5774s; samplesPerSecond = 1108.4
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.30580978 * 640; Err = 0.45312500 * 640; time = 0.5854s; samplesPerSecond = 1093.2
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.25094757 * 640; Err = 0.46250000 * 640; time = 0.5801s; samplesPerSecond = 1103.3
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.30743027 * 640; Err = 0.45312500 * 640; time = 0.5829s; samplesPerSecond = 1098.0
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.26045227 * 640; Err = 0.44531250 * 640; time = 0.5902s; samplesPerSecond = 1084.4
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.27132263 * 640; Err = 0.45468750 * 640; time = 0.5832s; samplesPerSecond = 1097.4
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.17863464 * 640; Err = 0.44375000 * 640; time = 0.5886s; samplesPerSecond = 1087.3
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.12143250 * 640; Err = 0.41875000 * 640; time = 0.5863s; samplesPerSecond = 1091.6
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.21547394 * 640; Err = 0.44843750 * 640; time = 0.5987s; samplesPerSecond = 1068.9
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.29284515 * 640; Err = 0.45156250 * 640; time = 0.5923s; samplesPerSecond = 1080.5
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 1.21398010 * 640; Err = 0.43437500 * 640; time = 0.5727s; samplesPerSecond = 1117.5
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 1.10491028 * 640; Err = 0.40468750 * 640; time = 0.5839s; samplesPerSecond = 1096.1
MPI Rank 3:  Epoch[ 4 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.17714844 * 640; Err = 0.40468750 * 640; time = 0.5819s; samplesPerSecond = 1099.8
MPI Rank 3: Finished Epoch[ 4 of 10]: [Training] CE = 1.26075164 * 12500; Err = 0.45544000 * 12500; totalSamplesSeen = 50000; learningRatePerSample = 0.0040000002; epochTime=11.4945s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.89384023 * 10000; perplexity = 6.64483746; Err = 0.58350000 * 10000
MPI Rank 3: Finished Epoch[ 4 of 10]: [Validate] CE = 1.89384023 * 10000; Err = 0.58350000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 5: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[   1-   1, 2.11%]: CE = 1.10002339 * 64; Err = 0.37500000 * 64; time = 0.0702s; samplesPerSecond = 911.8
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[   2-  10, 21.05%]: CE = 1.17139624 * 576; Err = 0.44444444 * 576; time = 0.5502s; samplesPerSecond = 1046.9
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.12820778 * 640; Err = 0.42656250 * 640; time = 0.5797s; samplesPerSecond = 1104.0
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.15241356 * 640; Err = 0.42656250 * 640; time = 0.5944s; samplesPerSecond = 1076.8
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.09000702 * 640; Err = 0.38906250 * 640; time = 0.5856s; samplesPerSecond = 1092.9
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  41-  50, 105.26%]: CE = 1.19195709 * 640; Err = 0.44218750 * 640; time = 0.5899s; samplesPerSecond = 1084.9
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.10248909 * 640; Err = 0.39062500 * 640; time = 0.5897s; samplesPerSecond = 1085.3
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.07433548 * 640; Err = 0.39531250 * 640; time = 0.5963s; samplesPerSecond = 1073.2
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  71-  80, 168.42%]: CE = 1.07961502 * 640; Err = 0.37500000 * 640; time = 0.5818s; samplesPerSecond = 1100.0
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  81-  90, 189.47%]: CE = 1.17190247 * 640; Err = 0.42500000 * 640; time = 0.5749s; samplesPerSecond = 1113.2
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[  91- 100, 210.53%]: CE = 1.07768555 * 640; Err = 0.40468750 * 640; time = 0.5802s; samplesPerSecond = 1103.1
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 1.11985016 * 640; Err = 0.38125000 * 640; time = 0.5771s; samplesPerSecond = 1109.1
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 1.02392578 * 640; Err = 0.36875000 * 640; time = 0.6009s; samplesPerSecond = 1065.1
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.96797943 * 640; Err = 0.35312500 * 640; time = 0.5801s; samplesPerSecond = 1103.3
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 1.02201080 * 640; Err = 0.36718750 * 640; time = 0.5810s; samplesPerSecond = 1101.5
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 1.11321411 * 640; Err = 0.40156250 * 640; time = 0.5694s; samplesPerSecond = 1123.9
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 1.01297302 * 640; Err = 0.35312500 * 640; time = 0.5891s; samplesPerSecond = 1086.4
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.97131805 * 640; Err = 0.35781250 * 640; time = 0.5917s; samplesPerSecond = 1081.7
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.93461304 * 640; Err = 0.34375000 * 640; time = 0.5848s; samplesPerSecond = 1094.5
MPI Rank 3:  Epoch[ 5 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 1.01104279 * 640; Err = 0.35000000 * 640; time = 0.5905s; samplesPerSecond = 1083.9
MPI Rank 3: Finished Epoch[ 5 of 10]: [Training] CE = 1.06996484 * 12500; Err = 0.38800000 * 12500; totalSamplesSeen = 62500; learningRatePerSample = 0.0040000002; epochTime=11.5023s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.15408139 * 10000; perplexity = 3.17110908; Err = 0.39340000 * 10000
MPI Rank 3: Finished Epoch[ 5 of 10]: [Validate] CE = 1.15408139 * 10000; Err = 0.39340000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 6: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.66463846 * 64; Err = 0.21875000 * 64; time = 0.0640s; samplesPerSecond = 999.9
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.95807193 * 576; Err = 0.35416667 * 576; time = 0.5234s; samplesPerSecond = 1100.5
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  11-  20, 42.11%]: CE = 1.09921541 * 640; Err = 0.40468750 * 640; time = 0.5827s; samplesPerSecond = 1098.3
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  21-  30, 63.16%]: CE = 1.03941727 * 640; Err = 0.37031250 * 640; time = 0.5900s; samplesPerSecond = 1084.7
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  31-  40, 84.21%]: CE = 1.04207897 * 640; Err = 0.37343750 * 640; time = 0.5748s; samplesPerSecond = 1113.4
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.97364235 * 640; Err = 0.35468750 * 640; time = 0.5661s; samplesPerSecond = 1130.5
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  51-  60, 126.32%]: CE = 1.05420876 * 640; Err = 0.38906250 * 640; time = 0.6022s; samplesPerSecond = 1062.8
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  61-  70, 147.37%]: CE = 1.00965767 * 640; Err = 0.36562500 * 640; time = 0.5801s; samplesPerSecond = 1103.2
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.87501450 * 640; Err = 0.30625000 * 640; time = 0.5824s; samplesPerSecond = 1099.0
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.95798798 * 640; Err = 0.35468750 * 640; time = 0.5917s; samplesPerSecond = 1081.6
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.86214981 * 640; Err = 0.30312500 * 640; time = 0.5808s; samplesPerSecond = 1101.9
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.91390305 * 640; Err = 0.31718750 * 640; time = 0.5812s; samplesPerSecond = 1101.2
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.93863678 * 640; Err = 0.34531250 * 640; time = 0.5925s; samplesPerSecond = 1080.1
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 1.00096588 * 640; Err = 0.36250000 * 640; time = 0.5751s; samplesPerSecond = 1112.9
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.91675415 * 640; Err = 0.32031250 * 640; time = 0.5972s; samplesPerSecond = 1071.7
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.96870270 * 640; Err = 0.35625000 * 640; time = 0.5779s; samplesPerSecond = 1107.5
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.89631805 * 640; Err = 0.31562500 * 640; time = 0.6000s; samplesPerSecond = 1066.7
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.83234253 * 640; Err = 0.28906250 * 640; time = 0.5919s; samplesPerSecond = 1081.3
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.88252411 * 640; Err = 0.29062500 * 640; time = 0.6025s; samplesPerSecond = 1062.3
MPI Rank 3:  Epoch[ 6 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.90306549 * 640; Err = 0.30937500 * 640; time = 0.5955s; samplesPerSecond = 1074.8
MPI Rank 3: Finished Epoch[ 6 of 10]: [Training] CE = 0.94885359 * 12500; Err = 0.33952000 * 12500; totalSamplesSeen = 75000; learningRatePerSample = 0.0040000002; epochTime=11.5069s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.04759987 * 10000; perplexity = 2.85080061; Err = 0.35950000 * 10000
MPI Rank 3: Finished Epoch[ 6 of 10]: [Validate] CE = 1.04759987 * 10000; Err = 0.35950000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 7: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.91666543 * 64; Err = 0.32812500 * 64; time = 0.0658s; samplesPerSecond = 972.5
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.91315170 * 576; Err = 0.34027778 * 576; time = 0.5113s; samplesPerSecond = 1126.4
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.96461391 * 640; Err = 0.34062500 * 640; time = 0.6011s; samplesPerSecond = 1064.8
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.92087727 * 640; Err = 0.31875000 * 640; time = 0.6004s; samplesPerSecond = 1066.0
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.90849247 * 640; Err = 0.30781250 * 640; time = 0.5937s; samplesPerSecond = 1077.9
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.91062584 * 640; Err = 0.33125000 * 640; time = 0.5991s; samplesPerSecond = 1068.3
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.85737305 * 640; Err = 0.29375000 * 640; time = 0.6014s; samplesPerSecond = 1064.1
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.89214706 * 640; Err = 0.33125000 * 640; time = 0.5875s; samplesPerSecond = 1089.4
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.76979179 * 640; Err = 0.28593750 * 640; time = 0.5831s; samplesPerSecond = 1097.5
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.77764893 * 640; Err = 0.26406250 * 640; time = 0.5790s; samplesPerSecond = 1105.3
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.89367218 * 640; Err = 0.30156250 * 640; time = 0.5825s; samplesPerSecond = 1098.7
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.79766388 * 640; Err = 0.27343750 * 640; time = 0.5821s; samplesPerSecond = 1099.5
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.92271500 * 640; Err = 0.31250000 * 640; time = 0.5781s; samplesPerSecond = 1107.0
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.83825226 * 640; Err = 0.28437500 * 640; time = 0.6068s; samplesPerSecond = 1054.7
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.88157196 * 640; Err = 0.31875000 * 640; time = 0.5836s; samplesPerSecond = 1096.6
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.80200043 * 640; Err = 0.27500000 * 640; time = 0.5756s; samplesPerSecond = 1111.8
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.84184265 * 640; Err = 0.29062500 * 640; time = 0.5778s; samplesPerSecond = 1107.7
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.78042297 * 640; Err = 0.26250000 * 640; time = 0.5767s; samplesPerSecond = 1109.7
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.78772125 * 640; Err = 0.30156250 * 640; time = 0.5614s; samplesPerSecond = 1139.9
MPI Rank 3:  Epoch[ 7 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.76076660 * 640; Err = 0.27656250 * 640; time = 0.5694s; samplesPerSecond = 1123.9
MPI Rank 3: Finished Epoch[ 7 of 10]: [Training] CE = 0.85366859 * 12500; Err = 0.30072000 * 12500; totalSamplesSeen = 87500; learningRatePerSample = 0.0040000002; epochTime=11.4551s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 0.86912201 * 10000; perplexity = 2.38481608; Err = 0.29770000 * 10000
MPI Rank 3: Finished Epoch[ 7 of 10]: [Validate] CE = 0.86912201 * 10000; Err = 0.29770000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 8: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.76156753 * 64; Err = 0.26562500 * 64; time = 0.0685s; samplesPerSecond = 934.7
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.79726209 * 576; Err = 0.25520833 * 576; time = 0.5350s; samplesPerSecond = 1076.7
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.75906281 * 640; Err = 0.26718750 * 640; time = 0.5786s; samplesPerSecond = 1106.1
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.70674982 * 640; Err = 0.25625000 * 640; time = 0.5761s; samplesPerSecond = 1110.9
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.78871994 * 640; Err = 0.27343750 * 640; time = 0.5841s; samplesPerSecond = 1095.8
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.86311169 * 640; Err = 0.30781250 * 640; time = 0.5846s; samplesPerSecond = 1094.7
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.83750725 * 640; Err = 0.29062500 * 640; time = 0.5771s; samplesPerSecond = 1109.0
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.71700745 * 640; Err = 0.26093750 * 640; time = 0.5898s; samplesPerSecond = 1085.0
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.79741211 * 640; Err = 0.27968750 * 640; time = 0.5798s; samplesPerSecond = 1103.9
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.71015625 * 640; Err = 0.23593750 * 640; time = 0.5797s; samplesPerSecond = 1104.0
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.66332321 * 640; Err = 0.21093750 * 640; time = 0.5830s; samplesPerSecond = 1097.8
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.73167725 * 640; Err = 0.23593750 * 640; time = 0.5920s; samplesPerSecond = 1081.0
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.82820816 * 640; Err = 0.30156250 * 640; time = 0.5891s; samplesPerSecond = 1086.5
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.81832886 * 640; Err = 0.28593750 * 640; time = 0.5708s; samplesPerSecond = 1121.3
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.74096451 * 640; Err = 0.22968750 * 640; time = 0.5688s; samplesPerSecond = 1125.1
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.71533890 * 640; Err = 0.25468750 * 640; time = 0.5872s; samplesPerSecond = 1089.8
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.69374924 * 640; Err = 0.24062500 * 640; time = 0.6054s; samplesPerSecond = 1057.1
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.72442932 * 640; Err = 0.25468750 * 640; time = 0.6016s; samplesPerSecond = 1063.9
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.70548706 * 640; Err = 0.23750000 * 640; time = 0.5786s; samplesPerSecond = 1106.0
MPI Rank 3:  Epoch[ 8 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.74352570 * 640; Err = 0.27500000 * 640; time = 0.5679s; samplesPerSecond = 1127.0
MPI Rank 3: Finished Epoch[ 8 of 10]: [Training] CE = 0.75233609 * 12500; Err = 0.26008000 * 12500; totalSamplesSeen = 100000; learningRatePerSample = 0.0040000002; epochTime=11.4496s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 0.84283707 * 10000; perplexity = 2.32294800; Err = 0.29290000 * 10000
MPI Rank 3: Finished Epoch[ 8 of 10]: [Validate] CE = 0.84283707 * 10000; Err = 0.29290000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 9: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.66662049 * 64; Err = 0.20312500 * 64; time = 0.0787s; samplesPerSecond = 813.1
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.67946055 * 576; Err = 0.25000000 * 576; time = 0.5232s; samplesPerSecond = 1100.9
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.73019710 * 640; Err = 0.24687500 * 640; time = 0.6113s; samplesPerSecond = 1047.0
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.69496613 * 640; Err = 0.24062500 * 640; time = 0.5860s; samplesPerSecond = 1092.2
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.67561741 * 640; Err = 0.22343750 * 640; time = 0.5658s; samplesPerSecond = 1131.1
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.73045483 * 640; Err = 0.26406250 * 640; time = 0.5813s; samplesPerSecond = 1101.0
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.64040833 * 640; Err = 0.20625000 * 640; time = 0.5927s; samplesPerSecond = 1079.8
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.70638771 * 640; Err = 0.24218750 * 640; time = 0.5689s; samplesPerSecond = 1125.0
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.69477768 * 640; Err = 0.24218750 * 640; time = 0.5866s; samplesPerSecond = 1091.1
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.66495972 * 640; Err = 0.22968750 * 640; time = 0.5799s; samplesPerSecond = 1103.6
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.63823318 * 640; Err = 0.21562500 * 640; time = 0.5740s; samplesPerSecond = 1114.9
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.76220016 * 640; Err = 0.26406250 * 640; time = 0.5897s; samplesPerSecond = 1085.4
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.66645660 * 640; Err = 0.22187500 * 640; time = 0.5637s; samplesPerSecond = 1135.3
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.69810104 * 640; Err = 0.23906250 * 640; time = 0.5753s; samplesPerSecond = 1112.4
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.70974350 * 640; Err = 0.24843750 * 640; time = 0.5898s; samplesPerSecond = 1085.0
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.65959549 * 640; Err = 0.23437500 * 640; time = 0.5797s; samplesPerSecond = 1104.0
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.62158890 * 640; Err = 0.22500000 * 640; time = 0.5671s; samplesPerSecond = 1128.5
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.64623489 * 640; Err = 0.21875000 * 640; time = 0.6364s; samplesPerSecond = 1005.6
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.61810303 * 640; Err = 0.21562500 * 640; time = 0.6038s; samplesPerSecond = 1059.9
MPI Rank 3:  Epoch[ 9 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.67798080 * 640; Err = 0.24843750 * 640; time = 0.6065s; samplesPerSecond = 1055.2
MPI Rank 3: Finished Epoch[ 9 of 10]: [Training] CE = 0.67787625 * 12500; Err = 0.23448000 * 12500; totalSamplesSeen = 112500; learningRatePerSample = 0.0040000002; epochTime=11.5096s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 1.00118064 * 10000; perplexity = 2.72149303; Err = 0.32710000 * 10000
MPI Rank 3: Finished Epoch[ 9 of 10]: [Validate] CE = 1.00118064 * 10000; Err = 0.32710000 * 10000
MPI Rank 3: 
MPI Rank 3: Starting Epoch 10: learning rate per sample = 0.004000  effective momentum = 0.000000  momentum as time constant = 0.0 samples
MPI Rank 3: 
MPI Rank 3: Starting minibatch loop, distributed reading is ENABLED.
MPI Rank 3:  Epoch[10 of 10]-Minibatch[   1-   1, 2.11%]: CE = 0.73650682 * 64; Err = 0.26562500 * 64; time = 0.0625s; samplesPerSecond = 1023.5
MPI Rank 3:  Epoch[10 of 10]-Minibatch[   2-  10, 21.05%]: CE = 0.67801927 * 576; Err = 0.22569444 * 576; time = 0.5373s; samplesPerSecond = 1072.1
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  11-  20, 42.11%]: CE = 0.72866554 * 640; Err = 0.25156250 * 640; time = 0.5971s; samplesPerSecond = 1071.8
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  21-  30, 63.16%]: CE = 0.70821667 * 640; Err = 0.25625000 * 640; time = 0.5809s; samplesPerSecond = 1101.7
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  31-  40, 84.21%]: CE = 0.62142544 * 640; Err = 0.21875000 * 640; time = 0.5700s; samplesPerSecond = 1122.8
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  41-  50, 105.26%]: CE = 0.68672523 * 640; Err = 0.24062500 * 640; time = 0.5685s; samplesPerSecond = 1125.8
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  51-  60, 126.32%]: CE = 0.66165695 * 640; Err = 0.23281250 * 640; time = 0.5928s; samplesPerSecond = 1079.6
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  61-  70, 147.37%]: CE = 0.68064995 * 640; Err = 0.23750000 * 640; time = 0.5957s; samplesPerSecond = 1074.3
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  71-  80, 168.42%]: CE = 0.65241356 * 640; Err = 0.22968750 * 640; time = 0.5744s; samplesPerSecond = 1114.2
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  81-  90, 189.47%]: CE = 0.67282906 * 640; Err = 0.23906250 * 640; time = 0.5985s; samplesPerSecond = 1069.3
MPI Rank 3:  Epoch[10 of 10]-Minibatch[  91- 100, 210.53%]: CE = 0.64783211 * 640; Err = 0.23281250 * 640; time = 0.5816s; samplesPerSecond = 1100.4
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 101- 110, 231.58%]: CE = 0.56808243 * 640; Err = 0.20000000 * 640; time = 0.5692s; samplesPerSecond = 1124.4
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 111- 120, 252.63%]: CE = 0.64670181 * 640; Err = 0.21093750 * 640; time = 0.5847s; samplesPerSecond = 1094.6
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 121- 130, 273.68%]: CE = 0.66506271 * 640; Err = 0.22187500 * 640; time = 0.5705s; samplesPerSecond = 1121.9
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 131- 140, 294.74%]: CE = 0.60598984 * 640; Err = 0.21562500 * 640; time = 0.5752s; samplesPerSecond = 1112.6
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 141- 150, 315.79%]: CE = 0.61511307 * 640; Err = 0.20781250 * 640; time = 0.5723s; samplesPerSecond = 1118.2
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 151- 160, 336.84%]: CE = 0.63021851 * 640; Err = 0.21875000 * 640; time = 0.5804s; samplesPerSecond = 1102.6
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 161- 170, 357.89%]: CE = 0.58336868 * 640; Err = 0.20937500 * 640; time = 0.5993s; samplesPerSecond = 1068.0
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 171- 180, 378.95%]: CE = 0.57475204 * 640; Err = 0.20312500 * 640; time = 0.5861s; samplesPerSecond = 1092.0
MPI Rank 3:  Epoch[10 of 10]-Minibatch[ 181- 190, 400.00%]: CE = 0.61112518 * 640; Err = 0.20781250 * 640; time = 0.5754s; samplesPerSecond = 1112.3
MPI Rank 3: Finished Epoch[10 of 10]: [Training] CE = 0.64377816 * 12500; Err = 0.22488000 * 12500; totalSamplesSeen = 125000; learningRatePerSample = 0.0040000002; epochTime=11.4117s
MPI Rank 3: Final Results: Minibatch[1-40]: CE = 0.69304930 * 10000; perplexity = 1.99980425; Err = 0.23570000 * 10000
MPI Rank 3: Finished Epoch[10 of 10]: [Validate] CE = 0.69304930 * 10000; Err = 0.23570000 * 10000
MPI Rank 3: ~MultiversoHelper
MPI Rank 3: 
MPI Rank 3: Action "train" complete.
MPI Rank 3: 
MPI Rank 3: COMPLETED.
MPI Rank 3: ~MPIWrapper